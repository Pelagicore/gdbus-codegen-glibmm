{% for node_xml in node_xmls %}
static const char interfaceXml{{ loop.index0 }}[] = R"XML_DELIMITER({{ node_xml | to_utf8 }})XML_DELIMITER";
{% endfor %}

#include "{{ stub_h_name }}"

{% for interface in interfaces %}
{% set class_name_with_namespace = interface.cpp_namespace_name + '::' + interface.cpp_class_name_stub %}
{{ class_name_with_namespace }}::{{ interface.cpp_class_name_stub }}():
    m_interfaceName("{{ interface.name }}")
{
{% for signal in interface.signals if signal is supported_by_sigc %}
    {{ signal.name }}_signal.connect(sigc::mem_fun(this, &{{ interface.cpp_class_name_stub }}::{{ signal.name }}_emitter));
{% endfor %}
}

{{ class_name_with_namespace }}::~{{ interface.cpp_class_name_stub }}()
{
    unregister_object();
}

guint {{ class_name_with_namespace }}::register_object(
    const Glib::RefPtr<Gio::DBus::Connection> &connection,
    const Glib::ustring &object_path)
{
    if (m_registeredObjectId != 0) {
        g_warning("Cannot register the same object (%s) twice", object_path.c_str());
        return 0;
    }

    try {
        introspection_data = Gio::DBus::NodeInfo::create_for_xml(interfaceXml0);
    } catch(const Glib::Error& ex) {
        g_warning("Unable to create introspection data for %s: %s", object_path.c_str(), ex.what().c_str());
        return 0;
    }
    Gio::DBus::InterfaceVTable *interface_vtable =
        new Gio::DBus::InterfaceVTable(
            sigc::mem_fun(this, &{{ interface.cpp_class_name_stub }}::on_method_call),
            sigc::mem_fun(this, &{{ interface.cpp_class_name_stub }}::on_interface_get_property),
            sigc::mem_fun(this, &{{ interface.cpp_class_name_stub }}::on_interface_set_property));

    try {
        m_registeredObjectId = connection->register_object(object_path,
            introspection_data->lookup_interface("{{ interface.name }}"),
            *interface_vtable);
        m_connection = connection;
        m_objectPath = object_path;
    } catch(const Glib::Error &ex) {
        g_warning("Registration of object %s failed: %s", object_path.c_str(), ex.what().c_str());
    }

    return m_registeredObjectId;
}

void {{ class_name_with_namespace }}::unregister_object()
{
    if (m_registeredObjectId == 0)
        return;

    m_connection->unregister_object(m_registeredObjectId);
    m_registeredObjectId = 0;
    m_connection.reset();
    m_objectPath.clear();
}

void {{ class_name_with_namespace }}::on_method_call(
    const Glib::RefPtr<Gio::DBus::Connection> &/* connection */,
    const Glib::ustring &/* sender */,
    const Glib::ustring &/* object_path */,
    const Glib::ustring &/* interface_name */,
    const Glib::ustring &method_name,
    const Glib::VariantContainerBase &parameters,
    const Glib::RefPtr<Gio::DBus::MethodInvocation> &invocation)
{
    static_cast<void>(method_name); // maybe unused
    static_cast<void>(parameters); // maybe unused
    static_cast<void>(invocation); // maybe unused

{% for method in interface.methods %}
    if (method_name.compare("{{ method.name }}") == 0) {
    {% for arg in method.in_args %}
        Glib::Variant<{{ arg.variant_type }}> base_{{ arg.name }};
        parameters.get_child(base_{{ arg.name }}, {{ loop.index0 }});
        {{ arg.variant_type }} p_{{ arg.name }} = base_{{ arg.name }}.get();

    {% endfor %}
        MethodInvocation methodInvocation(invocation);
        {{ method.name }}(
    {% for arg in method.in_args %}
            {{ arg.cpptype_get_cast }}(p_{{ arg.name }}),
    {% endfor %}
            methodInvocation);
    }

{% endfor %}
}

void {{ class_name_with_namespace }}::on_interface_get_property(
    Glib::VariantBase &property,
    const Glib::RefPtr<Gio::DBus::Connection> &/* connection */,
    const Glib::ustring &/* sender */,
    const Glib::ustring &/* object_path */,
    const Glib::ustring &/* interface_name */,
    const Glib::ustring &property_name)
{
    static_cast<void>(property); // maybe unused
    static_cast<void>(property_name); // maybe unused

{% for prop in interface.properties if prop.readable %}
    if (property_name.compare("{{ prop.name }}") == 0) {
        property = Glib::Variant<{{ prop.variant_type }}>::create({{ prop.cpptype_to_dbus }}({{ prop.name }}_get()));
    }

{% endfor %}
}

bool {{ class_name_with_namespace }}::on_interface_set_property(
    const Glib::RefPtr<Gio::DBus::Connection> &/* connection */,
    const Glib::ustring &/* sender */,
    const Glib::ustring &/* object_path */,
    const Glib::ustring &/* interface_name */,
    const Glib::ustring &property_name,
    const Glib::VariantBase &value)
{
    static_cast<void>(property_name); // maybe unused
    static_cast<void>(value); // maybe unused

{% for prop in interface.properties if prop.writable %}
    if (property_name.compare("{{ prop.name }}") == 0) {
        try {
            Glib::Variant<{{ prop.variant_type }}> castValue =
                Glib::VariantBase::cast_dynamic<Glib::Variant<{{ prop.variant_type }}>>(value);
            {{ prop.cpptype_out }} val =
                {{ prop.cpptype_get_cast }}(castValue.get());
            {{ prop.name }}_set(val);
        } catch (const std::bad_cast &) {
            g_warning ("Bad cast when casting {{ prop.name }}");
        }
    }

{% endfor %}
    return true;
}

{% for signal in interface.signals if signal is supported_by_sigc %}
void {{ class_name_with_namespace }}::{{ signal.name }}_emitter(
{%- set comma = joiner() -%}
{%- for arg in signal.args -%}
{{ comma() }}{{ arg.cpptype_out }} {{ arg.name }}
{%- endfor -%})
{
    std::vector<Glib::VariantBase> paramsList;

{% for arg in signal.args %}
    paramsList.push_back(Glib::Variant<{{ arg.variant_type }}>::create({{ arg.cpptype_to_dbus }}({{ arg.name }})));;
{% endfor %}

    m_connection->emit_signal(
        m_objectPath,
        "{{ signal.iface_name }}",
        "{{ signal.name }}",
        Glib::ustring(),
        Glib::Variant<std::vector<Glib::VariantBase>>::create_tuple(paramsList));
}

{% endfor %}
{% for prop in interface.properties %}

bool {{ class_name_with_namespace }}::{{ prop.name }}_set({{ prop.cpptype_in }} value)
{
    if ({{ prop.name }}_setHandler(value)) {
        Glib::Variant<{{ prop.variant_type }}> value_get =
            Glib::Variant<{{ prop.variant_type }}>::create({{ prop.cpptype_to_dbus }}({{ prop.name }}_get()));
        emitSignal("{{ prop.name }}", value_get);
        return true;
    }

    return false;
}
{% endfor %}

bool {{ class_name_with_namespace }}::emitSignal(
    const std::string &propName,
    Glib::VariantBase &value)
{
    std::map<Glib::ustring, Glib::VariantBase> changedProps;
    std::vector<Glib::ustring> changedPropsNoValue;

    changedProps[propName] = value;

    Glib::Variant<std::map<Glib::ustring, Glib::VariantBase>> changedPropsVar =
        Glib::Variant<std::map<Glib::ustring, Glib::VariantBase>>::create(changedProps);
    Glib::Variant<std::vector<Glib::ustring>> changedPropsNoValueVar =
        Glib::Variant<std::vector<Glib::ustring>>::create(changedPropsNoValue);
    std::vector<Glib::VariantBase> ps;
    ps.push_back(Glib::Variant<Glib::ustring>::create(m_interfaceName));
    ps.push_back(changedPropsVar);
    ps.push_back(changedPropsNoValueVar);
    Glib::VariantContainerBase propertiesChangedVariant =
        Glib::Variant<std::vector<Glib::VariantBase>>::create_tuple(ps);

    m_connection->emit_signal(
        m_objectPath,
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged",
        Glib::ustring(),
        propertiesChangedVariant);

    return true;
}
{%- endfor -%}
