{% for node_xml in node_xmls %}
static const char interfaceXml{{ loop.index0 }}[] = R"XML_DELIMITER({{ node_xml | to_utf8 }})XML_DELIMITER";
{% endfor %}

#include "{{ stub_h_name }}"

template<class T>
inline T specialGetter(Glib::Variant<T> variant)
{
    return variant.get();
}

template<>
inline std::string specialGetter(Glib::Variant<std::string> variant)
{
    // String is not guaranteed to be null-terminated, so don't use ::get()
    gsize n_elem;
    gsize elem_size = sizeof(char);
    char* data = (char*)g_variant_get_fixed_array(variant.gobj(), &n_elem, elem_size);

    return std::string(data, n_elem);
}

{% for interface in interfaces %}
{% set class_name_with_namespace = interface.cpp_namespace_name + '::' + interface.cpp_class_name_stub %}
{{ class_name_with_namespace }}::{{ interface.cpp_class_name_stub }}():
    m_interfaceName("{{ interface.name }}")
{
{% for signal in interface.signals if signal is supported_by_sigc %}
    {{ signal.name }}_signal.connect(sigc::bind<0>(sigc::mem_fun(this, &{{ interface.cpp_class_name_stub }}::{{ signal.name }}_emitter),
            std::vector<Glib::ustring>({""})) );
    {{ signal.name }}_selectiveSignal.connect(sigc::mem_fun(this, &{{ interface.cpp_class_name_stub }}::{{ signal.name }}_emitter));
{% endfor %}
}

{{ class_name_with_namespace }}::~{{ interface.cpp_class_name_stub }}()
{
    unregister_object();
}

guint {{ class_name_with_namespace }}::register_object(
    const Glib::RefPtr<Gio::DBus::Connection> &connection,
    const Glib::ustring &object_path)
{
    if (!introspection_data) {
        try {
            introspection_data = Gio::DBus::NodeInfo::create_for_xml(interfaceXml0);
        } catch(const Glib::Error& ex) {
            g_warning("Unable to create introspection data for %s: %s", object_path.c_str(), ex.what().c_str());
            return 0;
        }
    }

    Gio::DBus::InterfaceVTable *interface_vtable =
        new Gio::DBus::InterfaceVTable(
            sigc::mem_fun(this, &{{ interface.cpp_class_name_stub }}::on_method_call),
            sigc::mem_fun(this, &{{ interface.cpp_class_name_stub }}::on_interface_get_property),
            sigc::mem_fun(this, &{{ interface.cpp_class_name_stub }}::on_interface_set_property));

    guint registration_id;
    try {
        registration_id = connection->register_object(object_path,
            introspection_data->lookup_interface("{{ interface.name }}"),
            *interface_vtable);
    } catch(const Glib::Error &ex) {
        g_warning("Registration of object %s failed: %s", object_path.c_str(), ex.what().c_str());
        return 0;
    }

    m_registered_objects.emplace_back(RegisteredObject {
        registration_id,
        connection,
        object_path
    });

    return registration_id;
}

void {{ class_name_with_namespace }}::unregister_object()
{
    for (const RegisteredObject &obj: m_registered_objects) {
        obj.connection->unregister_object(obj.id);
    }
    m_registered_objects.clear();
}

void {{ class_name_with_namespace }}::on_method_call(
    const Glib::RefPtr<Gio::DBus::Connection> &/* connection */,
    const Glib::ustring &/* sender */,
    const Glib::ustring &/* object_path */,
    const Glib::ustring &/* interface_name */,
    const Glib::ustring &method_name,
    const Glib::VariantContainerBase &parameters,
    const Glib::RefPtr<Gio::DBus::MethodInvocation> &invocation)
{
    static_cast<void>(method_name); // maybe unused
    static_cast<void>(parameters); // maybe unused
    static_cast<void>(invocation); // maybe unused

{% for method in interface.methods %}
    if (method_name.compare("{{ method.name }}") == 0) {
    {% for arg in method.in_args %}
        Glib::Variant<{{ arg.variant_type }}> base_{{ arg.name }};
        parameters.get_child(base_{{ arg.name }}, {{ loop.index0 }});
        {{ arg.variant_type }} p_{{ arg.name }} = specialGetter(base_{{ arg.name }});

    {% endfor %}
        MethodInvocation methodInvocation(invocation);
        {{ method.name }}(
    {% for arg in method.in_args %}
            {{ arg.cpptype_get_cast }}(p_{{ arg.name }}),
    {% endfor %}
            methodInvocation);
    }

{% endfor %}
}

void {{ class_name_with_namespace }}::on_interface_get_property(
    Glib::VariantBase &property,
    const Glib::RefPtr<Gio::DBus::Connection> &/* connection */,
    const Glib::ustring &/* sender */,
    const Glib::ustring &/* object_path */,
    const Glib::ustring &/* interface_name */,
    const Glib::ustring &property_name)
{
    static_cast<void>(property); // maybe unused
    static_cast<void>(property_name); // maybe unused

{% for prop in interface.properties if prop.readable %}
    if (property_name.compare("{{ prop.name }}") == 0) {

        {% if prop.signature == "ay" %}
        gsize len;
        char *data;

        {{ prop.variant_type }} temp = {{ prop.name }}_get();
        len = temp.size();
        data = g_strndup (temp.c_str(), len);

        GVariant * newVar = g_variant_new_from_data (G_VARIANT_TYPE ("ay"), data, len, TRUE, g_free, data);

        property = Glib::Variant<std::string>(newVar);
        {% else %}
        property = Glib::Variant<{{ prop.variant_type }}>::create({{ prop.cpptype_to_dbus }}({{ prop.name }}_get()));
        {% endif %}
    }

{% endfor %}
}

bool {{ class_name_with_namespace }}::on_interface_set_property(
    const Glib::RefPtr<Gio::DBus::Connection> &/* connection */,
    const Glib::ustring &/* sender */,
    const Glib::ustring &/* object_path */,
    const Glib::ustring &/* interface_name */,
    const Glib::ustring &property_name,
    const Glib::VariantBase &value)
{
    static_cast<void>(property_name); // maybe unused
    static_cast<void>(value); // maybe unused

{% for prop in interface.properties if prop.writable %}
    if (property_name.compare("{{ prop.name }}") == 0) {
        try {
            Glib::Variant<{{ prop.variant_type }}> castValue =
                Glib::VariantBase::cast_dynamic<Glib::Variant<{{ prop.variant_type }}>>(value);
            {{ prop.cpptype_out }} val =
                {{ prop.cpptype_get_cast }}(specialGetter(castValue));
            {{ prop.name }}_set(val);
        } catch (const std::bad_cast &) {
            g_warning ("Bad cast when casting {{ prop.name }}");
        }
    }

{% endfor %}
    return true;
}

{% for signal in interface.signals if signal is supported_by_sigc %}
void {{ class_name_with_namespace }}::{{ signal.name }}_emitter(
    const std::vector<Glib::ustring> &destination_bus_names,
{%- set comma = joiner() -%}
{%- for arg in signal.args -%}
{{ comma() }}{{ arg.cpptype_in }} {{ arg.name }}
{%- endfor -%})
{
    std::vector<Glib::VariantBase> paramsList;

{% for arg in signal.args %}
    paramsList.push_back(Glib::Variant<{{ arg.variant_type }}>::create({{ arg.cpptype_to_dbus }}({{ arg.name }})));;
{% endfor %}

    const Glib::VariantContainerBase params =
        Glib::Variant<std::vector<Glib::VariantBase>>::create_tuple(paramsList);
    for (const RegisteredObject &obj: m_registered_objects) {
        for (const auto &bus_name: destination_bus_names) {
            obj.connection->emit_signal(
                    obj.object_path,
                    "{{ signal.iface_name }}",
                    "{{ signal.name }}",
                    bus_name,
                    params);
        }
    }
}

{% endfor %}
{% for prop in interface.properties %}

bool {{ class_name_with_namespace }}::{{ prop.name }}_set({{ prop.cpptype_in }} value)
{
    if ({{ prop.name }}_setHandler(value)) {
        {% if prop.signature == "ay" %}
        gsize len;
        char *data;

        len = value.size();
        data = g_strndup (value.c_str(), len);

        GVariant * newVar = g_variant_new_from_data (G_VARIANT_TYPE ("ay"), data, len, TRUE, g_free, data);

        Glib::Variant<{{ prop.variant_type }}> value_get =
            Glib::Variant<{{ prop.variant_type }}>(newVar);
        {% else %}
        Glib::Variant<{{ prop.variant_type }}> value_get =
            Glib::Variant<{{ prop.variant_type }}>::create({{ prop.cpptype_to_dbus }}({{ prop.name }}_get()));
        {% endif %}

        emitSignal("{{ prop.name }}", value_get);
        return true;
    }

    return false;
}
{% endfor %}

bool {{ class_name_with_namespace }}::emitSignal(
    const std::string &propName,
    Glib::VariantBase &value)
{
    std::map<Glib::ustring, Glib::VariantBase> changedProps;
    std::vector<Glib::ustring> changedPropsNoValue;

    changedProps[propName] = value;

    Glib::Variant<std::map<Glib::ustring, Glib::VariantBase>> changedPropsVar =
        Glib::Variant<std::map<Glib::ustring, Glib::VariantBase>>::create(changedProps);
    Glib::Variant<std::vector<Glib::ustring>> changedPropsNoValueVar =
        Glib::Variant<std::vector<Glib::ustring>>::create(changedPropsNoValue);
    std::vector<Glib::VariantBase> ps;
    ps.push_back(Glib::Variant<Glib::ustring>::create(m_interfaceName));
    ps.push_back(changedPropsVar);
    ps.push_back(changedPropsNoValueVar);
    Glib::VariantContainerBase propertiesChangedVariant =
        Glib::Variant<std::vector<Glib::VariantBase>>::create_tuple(ps);

    for (const RegisteredObject &obj: m_registered_objects) {
        obj.connection->emit_signal(
            obj.object_path,
            "org.freedesktop.DBus.Properties",
            "PropertiesChanged",
            Glib::ustring(),
            propertiesChangedVariant);
    }

    return true;
}
{%- endfor -%}
