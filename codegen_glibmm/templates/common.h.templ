#pragma once
#include <iostream>
#include <map>
#include <tuple>
#include "glibmm.h"
#include "giomm.h"

{% for interface in interfaces %}
class {{ interface.cpp_class_name }}TypeWrap {
public:
    template<typename T>
    static void unwrapList(std::vector<T> &list, const Glib::VariantContainerBase &wrapped) {
        for (uint i = 0; i < wrapped.get_n_children(); i++) {
            Glib::Variant<T> item;
            wrapped.get_child(item, i);
            list.push_back(item.get());
        }
    }

    static std::vector<Glib::ustring> stdStringVecToGlibStringVec(const std::vector<std::string> &strv) {
        std::vector<Glib::ustring> newStrv;
        for (uint i = 0; i < strv.size(); i++) {
            newStrv.push_back(strv[i]);
        }

        return newStrv;
    }

    static std::vector<std::string> glibStringVecToStdStringVec(const std::vector<Glib::ustring> &strv) {
        std::vector<std::string> newStrv;
        for (uint i = 0; i < strv.size(); i++) {
            newStrv.push_back(strv[i]);
        }

        return newStrv;
    }
{% for method in interface.methods if not method is templated %}
{% if method.in_args|length > 0 %}

    static Glib::VariantContainerBase {{ method.camel_name }}_pack(
        {%- set comma = joiner(',') -%}
        {%- for arg in method.in_args -%}
        {{ comma() }}
        {{ arg.cpptype_in }} arg_{{ arg.name }}
        {%- endfor -%}) {
        Glib::VariantContainerBase base;
        {% if method.in_args|length > 1 %}
        std::vector<Glib::VariantBase> params;
        {% for arg in method.in_args %}

        {{ arg.cppvalue_send(arg.name + "_param", "arg_" + arg.name, interface.cpp_class_name) | indent(2) }}
        params.push_back({{ arg.name }}_param);
        {% endfor %}
        {% else %}
        {% set arg = method.in_args[0] %}
        {{ arg.cppvalue_send("params", "arg_" + arg.name, interface.cpp_class_name) | indent(2) }}
        {% endif %}
        return Glib::VariantContainerBase::create_tuple(params);
    }
{% endif %}
{% endfor %}
};

class {{interface.cpp_class_name}}MessageHelper {
public:
    {{interface.cpp_class_name}}MessageHelper (const Glib::RefPtr<Gio::DBus::MethodInvocation> msg):
        m_message(msg) {}

    const Glib::RefPtr<Gio::DBus::MethodInvocation> getMessage() {
        return m_message;
    }

    void ret(Glib::Error error) {
        m_message->return_error(error);
    }

    void returnError(const Glib::ustring &domain, int code, const Glib::ustring &message) {
        m_message->return_error(domain, code, message);
    }

{% for return_types in interface.unique_return_types() %}
    void ret(
    {%- for type in return_types -%}
        {{- type.cpptype_in }} p{{ loop.index0 -}}
        {{- ", " if not loop.last -}}
    {%- endfor -%}
    ) {
        std::vector<Glib::VariantBase> vlist;
    {% for type in return_types %}
        {% if type.signature == "v" %}
        vlist.push_back(p{{ loop.index0 }});
        {% else %}
        {% set index = loop.index0|string %}
        {{ type.cppvalue_send('var' + index, 'p' + index, interface.cpp_class_name) | indent(2) }}
        vlist.push_back(var{{ loop.index0 }});
        {% endif %}
    {% endfor %}

        m_message->return_value(Glib::Variant<Glib::VariantBase>::create_tuple(vlist));
    }

{% endfor %}
{% endfor %}
private:
    Glib::RefPtr<Gio::DBus::MethodInvocation> m_message;
};
{% for interface in interfaces %}
{% if interface.errors %}

{% set namespaces = interface.errors_namespace.split("::") %}
{% for namespace in namespaces %}
namespace {{ namespace }} {
{% endfor %}
{% set errors = interface.errors %}

class Error: public Glib::Error {
public:
    enum Code {
{% for error in errors %}
        {% if error.doc_string %}
        /**
        {% for line in error.doc_string.lines %}
         * {{ line }}
        {% endfor %}
         */
        {% endif %}
        {{ error.name }},
{% endfor %}
    };

    Error();
    Error(int code, const Glib::ustring &message);

    static void initialize();
};
{% for namespace in namespaces|reverse %}
}// {{ namespace }}
{% endfor %}
{% endif %}
{% endfor %}
