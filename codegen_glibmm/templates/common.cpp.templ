#include "{{ common_h_name }}"

#include <cstring>
{% for interface in interfaces %}
{% if interface.errors %}
{% set namespaces = interface.errors_namespace.split('::') %}
{% set errors = interface.errors %}

{% for namespace in namespaces %}
namespace {{ namespace }} {
{% endfor %}

static const GDBusErrorEntry error_entries[] = {
{% for error in errors %}
    { Error::{{ error.name }}, "{{ error.prefix }}.{{ error.name }}" },
{% endfor %}
};

static void throw_func(GError *gerror)
{
    static const gchar prefix[] = "GDBus.Error:";
    Glib::ustring message;
    gint code = gerror->code;

    if (g_str_has_prefix(gerror->message, prefix)) {
        const char *colon = std::strstr(gerror->message + sizeof(prefix), ": ");
        message = colon ? (colon + 2) : gerror->message;
    } else {
        message = gerror->message;
    }
    g_error_free(gerror);

    throw Error(code, message);
}

static Glib::Quark register_domain_with_dbus()
{
    static const char domain[] = "{{ interface.cpp_namespace_name }}::ErrorQuark";
    Glib::QueryQuark quark(domain);
    if (quark.id() == 0) {
        static volatile gsize quark_volatile = 0;
        g_dbus_error_register_error_domain(domain,
                                           &quark_volatile,
                                           error_entries,
                                           G_N_ELEMENTS(error_entries));
        quark = Glib::QueryQuark(GQuark(quark_volatile));

        Glib::Error::register_domain(GQuark(quark_volatile), throw_func);
    }
    return static_cast<Glib::Quark>(quark);
}

Error::Error():
    Glib::Error()
{
}

Error::Error(int code, const Glib::ustring &message):
    Glib::Error(register_domain_with_dbus(), code, message)
{
}

void Error::initialize()
{
    register_domain_with_dbus();
}

GQuark Error::registered_domain()
{
    return register_domain_with_dbus().id();
}

{% for namespace in namespaces|reverse %}
}// {{ namespace }}
{% endfor %}
{% endif %}
{% endfor %}
