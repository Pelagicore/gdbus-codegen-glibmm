# -*- Mode: Python -*-

# GDBus - GLib D-Bus Library
#
# Copyright (C) 2008-2011 Red Hat, Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General
# Public License along with this library; if not, see <http://www.gnu.org/licenses/>.
#
# Author: David Zeuthen   <davidz@redhat.com>
#  (2014) Jonatan Palsson <jonatan.palsson@pelagicore.com>

import sys

from textwrap import dedent

from . import config
from . import utils
from . import dbustypes

# ----------------------------------------------------------------------------------------------------

SIGNAL_MAX_PARAM = 10

class CodeGenerator:
    def __init__(self, ifaces, namespace, interface_prefix, node_xmls, proxy_h, proxy_cpp, stub_cpp, stub_h, common_cpp, common_h):
        self.ifaces = ifaces
        self.proxy_h = proxy_h
        self.proxy_cpp = proxy_cpp
        self.stub_h = stub_h
        self.stub_cpp = stub_cpp
        self.common_h = common_h
        self.common_cpp = common_cpp
        self.node_xmls = node_xmls

    def emit (self, dest, text, newline = True):
        """ Emit code to the specified file
            @param newline boolean indicating whether to append a newline to
                           generated code
        """
        dest.write (text)
        if newline:
            dest.write ("\n")

    def emit_h_p (self, text, newline = True):
        """ Emit code to proxy header file
            @param newline boolean indicating whether to append a newline to
                           generated code
        """
        self.emit(self.proxy_h, text, newline)

    def emit_cpp_p (self, text, newline = True):
        """ Emit code to proxy cpp file
            @param newline boolean indicating whether to append a newline to
                           generated code
        """
        self.emit(self.proxy_cpp, text, newline)

    def emit_h_s (self, text, newline = True):
        """ Emit code to stub header file
            @param newline boolean indicating whether to append a newline to
                           generated code
        """
        self.emit(self.stub_h, text, newline)

    def emit_cpp_s (self, text, newline = True):
        """ Emit code to stub cpp file
            @param newline boolean indicating whether to append a newline to
                           generated code
        """
        self.emit(self.stub_cpp, text, newline)

    def emit_h_common (self, text, newline = True):
        """ Emit code to common header file
            @param newline boolean indicating whether to append a newline to
                           generated code
        """
        self.emit(self.common_h, text, newline)

    def emit_cpp_common (self, text, newline = True):
        """ Emit code to common cpp file
            @param newline boolean indicating whether to append a newline to
                           generated code
        """
        self.emit(self.common_cpp, text, newline)

    def generate_intro_proxy(self):
        """ Generate a header for the proxy cpp file """
        self.emit_cpp_p(dedent('''/*
                     * Generated by gdbus-codegen-glibmm %s. DO NOT EDIT.
                     *
                     * The license of this code is the same as for the source it was derived from.
                     */
                     ''') %(config.VERSION))

        self.emit_cpp_p('#include "%s"' %(self.proxy_h.name))

    def declare_types_proxy(self):
        """ Generate types and classes required by the proxy. This will
        generate a complete class declaration, which is implemented in the
        corresponding cpp file
        """
        self.emit_h_p("#pragma once")
        self.emit_h_p("#include <string>")
        self.emit_h_p("#include <glibmm.h>")
        self.emit_h_p("#include <giomm.h>")
        self.emit_h_p("#include \""+self.common_h.name+"\"")
        self.emit_h_p("")

        # Generate one class per interface
        for i in self.ifaces:
            for ns in i.cpp_namespace_name.split("::")[:-1]:
                self.emit_h_p ("namespace %s {" % ns)
            self.emit_h_p(dedent('''
            class {i.cpp_class_name} : public Glib::ObjectBase {{
            public:
                static void createForBus (Gio::DBus::BusType busType,
                                          Gio::DBus::ProxyFlags proxyFlags,
                                          const std::string &name,
                                          const std::string &objectPath,
                                          const Gio::SlotAsyncReady &slot);

                static Glib::RefPtr<{i.cpp_class_name}> createForBusFinish (Glib::RefPtr<Gio::AsyncResult> result);''').format(**locals()))

            self.emit_h_p("")

            # Generate all method calls for this interface
            for m in i.methods:
                # Flag method as templated if there is a variant arg
                templated = False
                for a in m.in_args:
                    if "v" in a.signature:
                        templated = True

                if templated is True:
                    # Template methods needs to be implemented in the header

                    # Begin method signature
                    self.emit_h_p("    template <typename T>")
                    self.emit_h_p("    void %s(" % m.name)
                    for a in m.in_args:
                        # Variants needs special attention
                        if "v" in a.signature:
                            self.emit_h_p("        T %s," % (a.name))
                        else:
                            self.emit_h_p("        %s %s," % (a.cpptype_in, a.name))
                    self.emit_h_p("        const Gio::SlotAsyncReady &callback)")
                    self.emit_h_p("    {")
                    # End method signature

                     #TODO: Seems like the handling of one param could be made the same as for more than one params?

                    #Begin method implementation
                    self.emit_h_p("        Glib::VariantContainerBase base;");
                    if (len(m.in_args) > 1):
                        self.emit_h_p("        std::vector<Glib::VariantBase> params;")
                        for a in m.in_args:
                            if "v" in a.signature:
                                self.emit_h_p("        Glib::Variant<Glib::Variant<T> > %s_variantValue;" % (a.name))
                                self.emit_h_p("        %s_variantValue = Glib::Variant<Glib::Variant<T> >::create(Glib::Variant<T>::create(%s_param));" % (a.name, a.name))
                                self.emit_h_p("        params.push_back(%s_variantValue);" % (a.name))
                            else:
                                self.emit_h_p("        " + a.cppvalue_send(a.name + "_param", a.name, i.cpp_class_name) + "")
                                self.emit_h_p("        params.push_back(%s_param);" % (a.name))
                    elif (len(m.in_args) == 1):
                        for a in m.in_args:
                            if "v" in a.signature:
                                self.emit_h_p("        Glib::Variant<Glib::Variant<T> > variantValue;")
                                self.emit_h_p("        variantValue = Glib::Variant<Glib::Variant<T> >::create(Glib::Variant<T>::create(%s));" % (a.name))
                                self.emit_h_p("        Glib::VariantBase params = variantValue;")
                            else:
                                self.emit_h_p("        " + a.cppvalue_send("params", a.name, i.cpp_class_name) + "")
                    if (len(m.in_args) > 0):
                        self.emit_h_p("        base = Glib::VariantContainerBase::create_tuple(params);")

                    self.emit_h_p(dedent('''
                            m_proxy->call(
                                "{m.name}",
                                callback,
                                base);
                        }}''').format(**locals()))
                    # End method implementation

                else:
                    # Async call method, the non template code just have their method definitions in the header
                    self.emit_h_p("    void %s (" % m.name)
                    for a in m.in_args:
                        self.emit_h_p("        %s %s," % (a.cpptype_in, a.name))
                    self.emit_h_p("        const Gio::SlotAsyncReady &slot);")

                self.emit_h_p("")

                # _finish method
                self.emit_h_p("    void %s_finish (" % m.name)
                for a in m.out_args:
                    self.emit_h_p("        %s& %s," % (a.cpptype_out, a.name))
                self.emit_h_p("        const Glib::RefPtr<Gio::AsyncResult>& res);")

                self.emit_h_p("")

            # Generate all properties for this interface
            for p in i.properties:
                if p.readable:
                    self.emit_h_p("     {p.cpptype_out} {p.name}_get();".format(**locals()))
                if p.writable:
                    self.emit_h_p("     void {p.name}_set({p.cpptype_in}, const Gio::SlotAsyncReady &);".format(**locals()))
                    self.emit_h_p("     void {p.name}_set_finish(const Glib::RefPtr<Gio::AsyncResult>&);".format(**locals()))


            # Generate all signals for this interface
            for s in i.signals:
                # Sigc does not allow an infinite number of parameters for signals.
                # The maximum number of signals is specified in SIGNAL_MAX_PARAM. A
                # warning is issued if this is exceeded, and no signal handler uis
                # generated.
                if (len(s.args) > SIGNAL_MAX_PARAM):
                    print "WARNING: signal %s has too many parameters, skipping" % s.name
                    continue
                params = []
                for a in s.args:
                    params.append(a.cpptype_out)
                params = ", ".join(params)
                self.emit_h_p(dedent('''sigc::signal<void, {params} > {s.name}_signal;''').format(**locals()))

            # Reference handling (needed for creating Glib::RefPtr, signal handler and private constructor
            self.emit_h_p(dedent('''
                void reference() {{}}
                void unreference() {{}}
                void handle_signal (const Glib::ustring& sender_name, const Glib::ustring& signal_name, const Glib::VariantContainerBase& parameters);

                private:
                {i.cpp_class_name} (Glib::RefPtr<Gio::DBus::Proxy> proxy) : Glib::ObjectBase() {{
                    this->m_proxy = proxy;
                    this->m_proxy->signal_signal().connect(sigc::mem_fun(this, &{i.cpp_class_name}::handle_signal));
                }}
                Glib::RefPtr<Gio::DBus::Proxy> m_proxy;
            }};''').format(**locals()))

            # Close namespaces, in reversed order
            for ns in reversed(i.cpp_namespace_name.split("::")[:-1]):
                self.emit_h_p("}// %s" % ns)

    def generate_method_calls_proxy(self, i):
        """ Generate implementation code for method invocations in the proxy
        object. This function populates the method section in the proxy
        cpp-file
        @param i list of Interface objects (defined in dbustypes.py)
        """
        # Generate method implementation for all methods in Interface
        for m in i.methods:
            # Flag method as templated if there is a variant arg
            templated = False
            for a in m.in_args:
                if "v" in a.signature:
                    templated = True

            # Only generate code if this is a non-templated method
            if templated is False:
                # async begin
                self.emit_cpp_p('void %s::%s(' % (i.cpp_namespace_name, m.camel_name))
                for a in m.in_args:
                    self.emit_cpp_p('        %s arg_%s,'%(a.cpptype_in, a.name))
                self.emit_cpp_p('        const Gio::SlotAsyncReady &callback)')
                self.emit_cpp_p('{')
                self.emit_cpp_p("    Glib::VariantContainerBase base;");

                if (len(m.in_args) > 1):
                    self.emit_cpp_p("std::vector<Glib::VariantBase> params;")
                    for a in m.in_args:
                        self.emit_cpp_p("  " + a.cppvalue_send(a.name + "_param", a.name, i.cpp_class_name)+ "")
                        self.emit_cpp_p("  params.push_back(%s_param);" % a.name)
                elif (len (m.in_args) == 1):
                    for a in m.in_args:
                        self.emit_cpp_p("    " + a.cppvalue_send("params", a.name, i.cpp_class_name) + "")

                if (len(m.in_args) > 0):
                    self.emit_cpp_p("    base = Glib::VariantContainerBase::create_tuple(params);")

                self.emit_cpp_p(dedent('''
                    m_proxy->call(
                        "{m.name}",
                        callback,
                        base);
                }}''').format(**locals()))

                self.emit_cpp_p("")

            # Generate _finish function for above method call, we want this for templated methods as well
            self.emit_cpp_p('void %s::%s_finish(' %(i.cpp_namespace_name, m.camel_name))
            for a in m.out_args:
                self.emit_cpp_p('        %s& out_%s,'%(a.cpptype_out, a.name))
            self.emit_cpp_p(dedent('''
                    const Glib::RefPtr<Gio::AsyncResult>& result)
            {{
                Glib::VariantContainerBase wrapped;
                wrapped = m_proxy->call_finish(result);
            ''').format(**locals()))

            for arg_index in range(0, len(m.out_args)):
                a = m.out_args[arg_index]
                outvar = "out_" + a.name
                self.emit_cpp_p("    " + a.cppvalue_get(outvar, str(arg_index), i.cpp_class_name))
                self.emit_cpp_p("")
            self.emit_cpp_p("}")
            self.emit_cpp_p("")

    def generate_property_handlers_proxy(self, i):
            for p in i.properties:
                if p.readable:
                    self.emit_cpp_p(dedent('''
                    {p.cpptype_out} {i.cpp_namespace_name}::{p.name}_get() {{
                        std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
                        Glib::Variant<{p.variant_type} > b;
                        if (std::find(props.begin(), props.end(), "{p.name}") != props.end()) {{
                            m_proxy->get_cached_property(b, "{p.name}");
                        }} else {{
                            g_print ("Todo: lookup value\\n");
                        }}''').format(**locals()))
                    cpptype_cast = p.cpptype_get_cast
                    # Prepend the class name if this is the generic "TypeWrap" class
                    if cpptype_cast.startswith("TypeWrap"):
                        cpptype_cast = i.cpp_class_name + cpptype_cast
                    self.emit_cpp_p(dedent('''
                        return {cpptype_cast}(b.get());
                    }}''').format(**locals()))
                cpptype_to_dbus = p.cpptype_to_dbus
                if cpptype_to_dbus.startswith("TypeWrap"):
                    cpptype_to_dbus = i.cpp_class_name + cpptype_to_dbus
                if p.writable:
                    self.emit_cpp_p(dedent('''

                    void {i.cpp_namespace_name}::{p.name}_set({p.cpptype_in} value, const Gio::SlotAsyncReady &cb) {{
                        std::vector<Glib::VariantBase> paramsVec;
                        paramsVec.push_back (Glib::Variant<Glib::ustring>::create("{i.name}"));
                        paramsVec.push_back (Glib::Variant<Glib::ustring>::create("{p.name}"));
                        paramsVec.push_back (Glib::Variant<Glib::VariantBase>::create(Glib::Variant<{p.variant_type} >::create({cpptype_to_dbus}(value))));
                        Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
                        m_proxy->call("org.freedesktop.DBus.Properties.Set",
                                        cb,
                                        params
                                        );
                    }}

                    void {i.cpp_namespace_name}::{p.name}_set_finish(const Glib::RefPtr<Gio::AsyncResult>& res) {{
                    }}
                    ''').format(**locals()))

    def generate_signal_handler_proxy(self, i):
        """ Generate a signal handler for Interface i. The signal handler
        dispatches D-Bus signals on internal sigc signals, which application
        code can connect to. The name of the sigc signal is the same as the
        D-Bus signal, with the _signal suffix appended.
        @param i Interface to generate signal handlers for
        """
        self.emit_cpp_p(dedent('''
            void {i.cpp_namespace_name}::handle_signal (const Glib::ustring& sender_name,
                                                        const Glib::ustring& signal_name,
                                                        const Glib::VariantContainerBase& parameters) {{
        ''').format(**locals()))

        # Generate signal handlers for all signals in Interface i
        for s in i.signals:
            # Sigc does not allow an infinite number of parameters for signals.
            # The maximum number of signals is specified in SIGNAL_MAX_PARAM. A
            # warning is issued if this is exceeded, and no signal handler uis
            # generated.
            if (len(s.args) > SIGNAL_MAX_PARAM):
                print "WARNING: signal %s has too many parameters, skipping" % s.name
                continue

            self.emit_cpp_p(dedent('''
                if (signal_name == "{s.name}") {{''').format(**locals()))

            paramsList = []

            # Generate marshalling code, converting GVariants to std:: types
            for ai in range(len(s.args)):
                a = s.args[ai]
                self.emit_cpp_p("        if (parameters.get_n_children() != " + str(len(s.args)) + ") { return; }")
                self.emit_cpp_p("        Glib::Variant<%s > base_%s;" % (a.variant_type, a.name))
                self.emit_cpp_p("        parameters.get_child(base_%s, %d);" % (a.name, ai))
                self.emit_cpp_p("        %s p_%s;" % (a.variant_type, a.name))
                self.emit_cpp_p("        p_%s = base_%s.get();" % (a.name, a.name))
                cpptype_cast = a.cpptype_get_cast
                # Prepend the class name if this is the generic "TypeWrap" class
                if cpptype_cast.startswith("TypeWrap"):
                    cpptype_cast = i.cpp_class_name + cpptype_cast
                paramsList.append("%s(p_%s)" % (cpptype_cast, a.name))

            paramsList = ', '.join(paramsList)
            self.emit_cpp_p('''        {s.name}_signal.emit({paramsList});'''.format(**locals()))
            self.emit_cpp_p("}")

        self.emit_cpp_p(dedent('''
            }}
        ''').format(**locals()))

    def generate_proxy_creation(self, i):
        """ Generate the createForBus function for each proxy. This function
        constructs a new instance of the proxy for the specified bus. This is
        the only legal way to create a new proxy.
        @param i Interface to generate creation function for
        """
        self.emit_cpp_p(dedent('''
        void {i.cpp_namespace_name}::createForBus (
            Gio::DBus::BusType busType,
            Gio::DBus::ProxyFlags proxyFlags,
            const std::string &name,
            const std::string &objectPath,
            const Gio::SlotAsyncReady &slot) {{
          Gio::DBus::Proxy::create_for_bus (busType,
              name,
              objectPath,
              "{i.name}",
              slot,
              Glib::RefPtr<Gio::DBus::InterfaceInfo>(),
              proxyFlags);
        }}

        Glib::RefPtr<{i.cpp_namespace_name}> {i.cpp_namespace_name}::createForBusFinish (Glib::RefPtr<Gio::AsyncResult> result) {{
            Glib::RefPtr<Gio::DBus::Proxy> proxy = Gio::DBus::Proxy::create_for_bus_finish (result);
            {i.cpp_namespace_name} *p = new {i.cpp_namespace_name} (proxy);
            return Glib::RefPtr<{i.cpp_namespace_name}> (p);
        }}''').format(**locals()))

    def generate_stub_introspection(self):
        """ Generate introspection XML for all introspection XML files """
        for i in range(0, len(self.node_xmls)):
            node_xml = self.node_xmls[i]

            # This will encode the XML introspection data as raw bytes. This is
            # to avoid any formatting issues when embedding the introspection
            # data in the stub file.
            self.emit_cpp_s ("static const char interfaceXml%d[] = R\"XML_DELIMITER(" % i, False)
            for char in node_xml:
                self.emit_cpp_s (char, False)
            self.emit_cpp_s (")XML_DELIMITER\";")

    def generate_stub_intro(self):
        """ Generate introduction for stub cpp file """
        self.emit_cpp_s ('#include "%s"' % self.stub_h.name)

    def declare_types_stub(self):
        """ Generate types and classes for the stub. This will generate the
        complete class needed for implementing the stub. The code is placed in
        the header file for the stub.
        """
        self.emit_h_s(dedent('''
        #pragma once
        #include <string>
        #include <glibmm.h>
        #include <giomm.h>
        #include "{self.common_h.name}"
        ''').format(**locals()))

        # Generate a separate class for each interface
        for i in self.ifaces:
            for ns in i.cpp_namespace_name.split("::")[:-1]:
                self.emit_h_s ("namespace %s {" % ns)

            self.emit_h_s(dedent('''
            class {i.cpp_class_name} {{
            public:
                {i.cpp_class_name}();
                virtual ~{i.cpp_class_name}();

                guint register_object(const Glib::RefPtr<Gio::DBus::Connection> &connection,
                                      const Glib::ustring &object_path);

                // deprecated:
                void connect(Gio::DBus::BusType, std::string);
            ''').format(**locals()))
            for p in i.properties:
                self.emit_h_s("    bool {p.name}_set({p.cpptype_in} value);".format(**locals()))

            self.emit_h_s("protected:")

            # Generate all methods in the interface
            for m in i.methods:
                # Async call method
                self.emit_h_s("virtual void %s (" % m.name)

                for a in m.in_args:
                    self.emit_h_s("    %s %s," % (a.cpptype_in, a.name))

                self.emit_h_s("    {i.cpp_class_name}MessageHelper msg) = 0;".format(**locals()))

            # Generate getters and setters for all properties
            for p in i.properties:
                self.emit_h_s("virtual {p.cpptype_out} {p.name}_get() = 0;".format(**locals()))
                self.emit_h_s(dedent('''
                    /* Handle the setting of a property
                        * This method will be called as a result of a call to <PropName>_set
                        * and should implement the actual setting of the property value.
                        * Should return true on sucess and false otherwise.
                        */'''))
                self.emit_h_s("virtual bool {p.name}_setHandler({p.cpptype_in} value) = 0;".format(**locals()))

            # Generate all signals
            for s in i.signals:
                if (len(s.args) > SIGNAL_MAX_PARAM):
                    print "WARNING: signal %s has too many parameters, skipping" % s.name
                    continue
                args = []

                for a in s.args:
                    args.append(a.cpptype_out)

                argsStr = ", ".join(args)
                self.emit_h_s(dedent('''
                void {s.name}_emitter({argsStr});
                sigc::signal<void, {argsStr} > {s.name}_signal;''').format(**locals()))

            # Generate the rest of the event handlers
            self.emit_h_s(dedent("""
            void on_bus_acquired(const Glib::RefPtr<Gio::DBus::Connection>& connection,
                                 const Glib::ustring& /* name */);

            void on_name_acquired(const Glib::RefPtr<Gio::DBus::Connection>& /* connection */,
                                  const Glib::ustring& /* name */);

            void on_name_lost(const Glib::RefPtr<Gio::DBus::Connection>& connection,
                              const Glib::ustring& /* name */);

            void on_method_call(const Glib::RefPtr<Gio::DBus::Connection>& /* connection */,
                               const Glib::ustring& /* sender */,
                               const Glib::ustring& /* object_path */,
                               const Glib::ustring& /* interface_name */,
                               const Glib::ustring& method_name,
                               const Glib::VariantContainerBase& parameters,
                               const Glib::RefPtr<Gio::DBus::MethodInvocation>& invocation);

            void on_interface_get_property(Glib::VariantBase& property,
                                                   const Glib::RefPtr<Gio::DBus::Connection>& connection,
                                                   const Glib::ustring& sender,
                                                   const Glib::ustring& object_path,
                                                   const Glib::ustring& interface_name,
                                                   const Glib::ustring& property_name);

            bool on_interface_set_property(
                   const Glib::RefPtr<Gio::DBus::Connection>& connection,
                   const Glib::ustring& sender,
                   const Glib::ustring& object_path,
                   const Glib::ustring& interface_name,
                   const Glib::ustring& property_name,
                   const Glib::VariantBase& value);

            private:
            bool emitSignal(const std::string& propName, Glib::VariantBase& value);

            guint connectionId, registeredId;
            Glib::RefPtr<Gio::DBus::NodeInfo> introspection_data;
            Glib::RefPtr<Gio::DBus::Connection> m_connection;
            std::string m_objectPath;
            std::string m_interfaceName;
            };"""))

            for ns in reversed(i.cpp_namespace_name.split("::")[:-1]):
                self.emit_h_s("}// %s" % ns)

            self.emit_h_s("")

    def define_types_stub_creation(self, i):
        # Constructor
        self.emit_cpp_s(dedent('''
        {i.cpp_namespace_name}::{i.cpp_class_name} () : connectionId(0), registeredId(0), m_interfaceName("{i.name}") {{
        ''').format(**locals()))
        for s in i.signals:
            # Sigc does not allow an infinite number of parameters for signals.
            # The maximum number of signals is specified in SIGNAL_MAX_PARAM. A
            # warning is issued if this is exceeded, and no signal handler uis
            # generated.
            if (len(s.args) > SIGNAL_MAX_PARAM):
                print "WARNING: signal %s has too many parameters, skipping" % s.name
                continue
            self.emit_cpp_s("    {s.name}_signal.connect(sigc::mem_fun(this, &{i.cpp_class_name}::{s.name}_emitter));".format(**locals()))
        #TODO: This code will only fetch introspection data for interfaces
        # contained in the first interfaceXml variable. We need to check which
        # interfaceXml variable contains our XML, and use the correct one
        # instead. This code will break if there are several introspection XML
        # files specified.
        self.emit_cpp_s(dedent('''
        }}

        {i.cpp_namespace_name}::~{i.cpp_class_name}()
        {{
        }}

        guint {i.cpp_namespace_name}::register_object(
            const Glib::RefPtr<Gio::DBus::Connection> &connection,
            const Glib::ustring &object_path)
        {{
            if (!m_objectPath.empty() && m_objectPath != object_path) {{
                g_warning("Cannot register the same object twice!");

                return 0;
            }}
            try {{
                    introspection_data = Gio::DBus::NodeInfo::create_for_xml(interfaceXml0);
            }} catch(const Glib::Error& ex) {{
                    g_warning("Unable to create introspection data: ");
                    g_warning("%s\\n", ex.what().c_str());
            }}
            Gio::DBus::InterfaceVTable *interface_vtable =
                new Gio::DBus::InterfaceVTable(
                    sigc::mem_fun(this, &{i.cpp_class_name}::on_method_call),
                    sigc::mem_fun(this, &{i.cpp_class_name}::on_interface_get_property),
                    sigc::mem_fun(this, &{i.cpp_class_name}::on_interface_set_property));
            guint id = 0;
            try {{
                id = connection->register_object(object_path,
                    introspection_data->lookup_interface("{i.name}"),
                    *interface_vtable);
                m_connection = connection;
                m_objectPath = object_path;
            }}
            catch(const Glib::Error &ex) {{
                g_warning("Registration of object failed");
            }}
            return id;
        }}

        void {i.cpp_namespace_name}::connect (
            Gio::DBus::BusType busType,
            std::string name)
        {{
            connectionId = Gio::DBus::own_name(busType,
                                               name,
                                               sigc::mem_fun(this, &{i.cpp_class_name}::on_bus_acquired),
                                               sigc::mem_fun(this, &{i.cpp_class_name}::on_name_acquired),
                                               sigc::mem_fun(this, &{i.cpp_class_name}::on_name_lost));
        }}''').format(**locals()))


    def define_types_method_handlers_stub(self, i):
        """ Generate code for handling and dispatching method calls in the
        stub. This code will trigger the correct user-defined function with
        parameter types converted to std:: c++ types.
        @param Interface i is the interface to generate method handlers for
        """
        self.emit_cpp_s(dedent('''
        void {i.cpp_namespace_name}::on_method_call(const Glib::RefPtr<Gio::DBus::Connection>& /* connection */,
                           const Glib::ustring& /* sender */,
                           const Glib::ustring& /* object_path */,
                           const Glib::ustring& /* interface_name */,
                           const Glib::ustring& method_name,
                           const Glib::VariantContainerBase& parameters,
                           const Glib::RefPtr<Gio::DBus::MethodInvocation>& invocation)
        {{
        ''').format(**locals()))
        for m in i.methods:
            #TODO: Make more thorough checks here. Method name is not enough.
            self.emit_cpp_s("    if (method_name.compare(\"%s\") == 0) {" % m.name)
            for ai in range(len(m.in_args)):
                a = m.in_args[ai]
                if a.signature == "v":
                    # Variants are deconstructed differently than the other types
                    self.emit_cpp_s("        Glib::VariantContainerBase containerBase = parameters;")
                    self.emit_cpp_s("        GVariant *output%s;" % (ai))
                    self.emit_cpp_s('        g_variant_get_child(containerBase.gobj(), %s, "v", &output%s);' % (ai, ai))
                    self.emit_cpp_s("        Glib::VariantBase p_%s;" % (a.name))
                    self.emit_cpp_s("        p_%s = Glib::VariantBase(output%s);" % (a.name, ai))
                    self.emit_cpp_s("")
                else:
                    self.emit_cpp_s("        Glib::Variant<%s > base_%s;" % (a.variant_type, a.name))
                    self.emit_cpp_s("        parameters.get_child(base_%s, %d);" % (a.name, ai))
                    self.emit_cpp_s("        %s p_%s;" % (a.variant_type, a.name))
                    self.emit_cpp_s("        p_%s = base_%s.get();" % (a.name, a.name))
                    self.emit_cpp_s("")
            self.emit_cpp_s("        %s(" % m.name)
            for a in m.in_args:
                cpptype_cast = a.cpptype_get_cast
                # Prepend the class name if this is the generic "TypeWrap" class
                if cpptype_cast.startswith("TypeWrap"):
                    cpptype_cast = i.cpp_class_name + cpptype_cast
                self.emit_cpp_s("            %s(p_%s)," % (cpptype_cast, a.name))
            self.emit_cpp_s("            {i.cpp_class_name}MessageHelper(invocation));".format(**locals()))
            self.emit_cpp_s("    }")
        self.emit_cpp_s("    }")

    def define_types_property_get_handlers_stub(self, i):
        object_path = "/" + i.name.replace(".", "/")

        self.emit_cpp_s(dedent('''
        void {i.cpp_namespace_name}::on_interface_get_property(Glib::VariantBase& property,
                                               const Glib::RefPtr<Gio::DBus::Connection>& connection,
                                               const Glib::ustring& sender,
                                               const Glib::ustring& object_path,
                                               const Glib::ustring& interface_name,
                                               const Glib::ustring& property_name) {{
        ''').format(**locals()))

        for p in i.properties:
            if p.readable:
                cpptype_to_dbus = p.cpptype_to_dbus
                # Prepend the class name if this is the generic "TypeWrap" class
                if cpptype_to_dbus.startswith("TypeWrap"):
                    cpptype_to_dbus = i.cpp_class_name + cpptype_to_dbus
                self.emit_cpp_s(dedent('''
                    if (property_name.compare("{p.name}") == 0) {{
                        property = Glib::Variant<{p.variant_type} >::create({cpptype_to_dbus}({p.name}_get()));
                    }}
                ''').format(**locals()))

        self.emit_cpp_s("}")

    def define_types_property_set_handlers_stub(self, i):
        object_path = "/" + i.name.replace(".", "/")
        self.emit_cpp_s(dedent('''
        bool {i.cpp_namespace_name}::on_interface_set_property(
               const Glib::RefPtr<Gio::DBus::Connection>& connection,
               const Glib::ustring& sender,
               const Glib::ustring& object_path,
               const Glib::ustring& interface_name,
               const Glib::ustring& property_name,
               const Glib::VariantBase& value) {{
        ''').format(**locals()))

        for p in i.properties:
            self.emit_cpp_s(dedent('''
                if (property_name.compare("{p.name}") == 0) {{
                    try {{
                        Glib::Variant<{p.variant_type} > castValue = Glib::VariantBase::cast_dynamic<Glib::Variant<{p.variant_type} > >(value);
                        {p.cpptype_out} val;''').format(**locals()))
            cpptype_cast = p.cpptype_get_cast
            # Prepend the class name if this is the generic "TypeWrap" class
            if cpptype_cast.startswith("TypeWrap"):
                cpptype_cast = i.cpp_class_name + cpptype_cast
            self.emit_cpp_s(dedent('''
                        val = {cpptype_cast}(castValue.get());''').format(**locals()))
            self.emit_cpp_s('''        {p.name}_set(val);'''.format(**locals()))
            self.emit_cpp_s(dedent('''
                    }} catch (std::bad_cast e) {{
                        g_warning ("Bad cast when casting {p.name}");
                    }}
                }}
            ''').format(**locals()))

        self.emit_cpp_s(dedent('''
            return true;
        }}
        ''').format(**locals()))

    def define_types_signal_emitters_stub(self, i):
        object_path = "/" + i.name.replace(".", "/")

        for s in i.signals:
            # Sigc does not allow an infinite number of parameters for signals.
            # The maximum number of signals is specified in SIGNAL_MAX_PARAM. A
            # warning is issued if this is exceeded, and no signal handler uis
            # generated.
            if (len(s.args) > SIGNAL_MAX_PARAM):
                print "WARNING: signal %s has too many parameters, skipping" % s.name
                continue
            args = []

            for a in s.args:
                args.append(a.cpptype_out + " " + a.name)

            argsStr = ", ".join(args)
            self.emit_cpp_s(dedent('''void {i.cpp_namespace_name}::{s.name}_emitter({argsStr}) {{
            std::vector<Glib::VariantBase> paramsList;''').format(**locals()))

            for a in s.args:
                cpptype_to_dbus = a.cpptype_to_dbus
                # Prepend the class name if this is the generic "TypeWrap" class
                if cpptype_to_dbus.startswith("TypeWrap"):
                    cpptype_to_dbus = i.cpp_class_name + cpptype_to_dbus
                self.emit_cpp_s(dedent('''
                paramsList.push_back(Glib::Variant<{a.variant_type} >::create({cpptype_to_dbus}({a.name})));;
                ''').format(**locals()))

            self.emit_cpp_s(dedent('''      m_connection->emit_signal(
                    "{object_path}",
                    "{s.iface_name}",
                    "{s.name}",
                    Glib::ustring(),
                    Glib::Variant<std::vector<Glib::VariantBase> >::create_tuple(paramsList));
            }}''').format(**locals()))

    def define_types_dbus_callbacks_stub(self, i):
        object_path = "/" + i.name.replace(".", "/")
        self.emit_cpp_s(dedent('''
        void {i.cpp_namespace_name}::on_bus_acquired(const Glib::RefPtr<Gio::DBus::Connection>& connection,
                                 const Glib::ustring& /* name */) {{
            registeredId = register_object(connection,
                                           "{object_path}");
            m_connection = connection;

            return;
        }}
        void {i.cpp_namespace_name}::on_name_acquired(const Glib::RefPtr<Gio::DBus::Connection>& /* connection */,
                              const Glib::ustring& /* name */) {{}}

        void {i.cpp_namespace_name}::on_name_lost(const Glib::RefPtr<Gio::DBus::Connection>& connection,
                          const Glib::ustring& /* name */) {{}}
        ''').format(**locals()))

    def define_types_property_setters_stub(self, i):
        for p in i.properties:
            cpptype_to_dbus = p.cpptype_to_dbus
            # Prepend the class name if this is the generic "TypeWrap" class
            if cpptype_to_dbus.startswith("TypeWrap"):
                cpptype_to_dbus = i.cpp_class_name + cpptype_to_dbus
            self.emit_cpp_s(dedent('''
            bool {i.cpp_namespace_name}::{p.name}_set({p.cpptype_in} value) {{
                if ({p.name}_setHandler(value)) {{
                    Glib::Variant<{p.variant_type} > value_get = Glib::Variant<{p.variant_type} >::create({cpptype_to_dbus}({p.name}_get()));
                    emitSignal("{p.name}", value_get);
                    return true;
                }}

                return false;
            }}''').format(**locals()))

    def define_types_emit_stub(self, i):
            self.emit_cpp_s(dedent('''
            bool {i.cpp_namespace_name}::emitSignal(const std::string& propName, Glib::VariantBase& value) {{
                std::map<Glib::ustring, Glib::VariantBase> changedProps;
                std::vector<Glib::ustring> changedPropsNoValue;

                changedProps[propName] = value;

                Glib::Variant<std::map<Glib::ustring,  Glib::VariantBase> > changedPropsVar = Glib::Variant<std::map <Glib::ustring, Glib::VariantBase> >::create (changedProps);
                Glib::Variant<std::vector<Glib::ustring> > changedPropsNoValueVar = Glib::Variant<std::vector<Glib::ustring> >::create(changedPropsNoValue);
                std::vector<Glib::VariantBase> ps;
                ps.push_back(Glib::Variant<Glib::ustring>::create(m_interfaceName));
                ps.push_back(changedPropsVar);
                ps.push_back(changedPropsNoValueVar);
                Glib::VariantContainerBase propertiesChangedVariant = Glib::Variant<std::vector<Glib::VariantBase> >::create_tuple(ps);

                m_connection->emit_signal(
                    m_objectPath,
                    "org.freedesktop.DBus.Properties",
                    "PropertiesChanged",
                    Glib::ustring(),
                    propertiesChangedVariant);

                return true;
            }}''').format(**locals()))

    def generate_common_intro(self):
        self.emit_h_common(dedent("""
        #pragma once
        #include <iostream>
        #include "glibmm.h"
        #include "giomm.h"
        """))

    def generate_common_classes(self, i):
        self.emit_h_common(dedent("""
        class {i.cpp_class_name}TypeWrap {{
            public:
                template<typename T>
                static void unwrapList(std::vector<T> &list, const Glib::VariantContainerBase &wrapped) {{
                    for (uint i = 0; i < wrapped.get_n_children (); i++) {{
                        Glib::Variant<T> item;
                        wrapped.get_child(item, i);
                        list.push_back(item.get());
                    }}
                }}

                static std::vector<Glib::ustring> stdStringVecToGlibStringVec(const std::vector<std::string> &strv) {{
                    std::vector<Glib::ustring> newStrv;
                    for (uint i = 0; i < strv.size(); i++) {{
                        newStrv.push_back(strv[i]);
                    }}

                    return newStrv;
                }}

                static std::vector<std::string> glibStringVecToStdStringVec(const std::vector<Glib::ustring> &strv) {{
                    std::vector<std::string> newStrv;
                    for (uint i = 0; i < strv.size(); i++) {{
                        newStrv.push_back(strv[i]);
                    }}

                    return newStrv;
                }}
        }};

        class {i.cpp_class_name}MessageHelper {{
        public:
            {i.cpp_class_name}MessageHelper (const Glib::RefPtr<Gio::DBus::MethodInvocation> msg) :
                m_message(msg) {{}}

            const Glib::RefPtr<Gio::DBus::MethodInvocation> getMessage() {{
                return m_message;
            }}

            void ret(Glib::Error error) {{
                m_message->return_error(error);
            }}

            void returnError(const Glib::ustring &domain, int code, const Glib::ustring &message) {{
                m_message->return_error(domain, code, message);
            }}
        """).format(**locals()))

        args = {}
        for m in i.methods:
            argstring = ""
            argvals = []
            for a in m.out_args:
                argstring += a.cpptype_out
                argvals.append(a)
            args[argstring] = argvals


        for a in args:
            a = args[a]
            params = []
            for index in range(len(a)):
                params.append(a[index].cpptype_out + " p%s" % index)
            self.emit_h_common("void ret(" + ', '.join(params) +")")
            self.emit_h_common("{")
            self.emit_h_common("    std::vector<Glib::VariantBase> vlist;")

            for index in range(len(a)):
                cpptype_to_dbus = a[index].cpptype_to_dbus
                # Prepend the class name if this is the generic "TypeWrap" class
                if cpptype_to_dbus.startswith("TypeWrap"):
                    cpptype_to_dbus = i.cpp_class_name + cpptype_to_dbus
                if a[index].signature == "v":
                    self.emit_h_common("    vlist.push_back(p{index});".format(**locals()))
                else:
                    self.emit_h_common("    vlist.push_back(Glib::Variant<"+a[index].variant_type+" >::create(" + cpptype_to_dbus + "(p{index})));".format(**locals()))

            self.emit_h_common(dedent("""
                m_message->return_value(Glib::Variant<Glib::VariantBase>::create_tuple(vlist));
            }
            """))

        self.emit_h_common(dedent("""
        private:
            Glib::RefPtr<Gio::DBus::MethodInvocation> m_message;
        };
        """))


    def generate(self):
        # Proxy
        self.generate_intro_proxy()
        self.declare_types_proxy()
        for i in self.ifaces:
            self.generate_method_calls_proxy(i)
            self.generate_property_handlers_proxy(i)
            self.generate_signal_handler_proxy(i)
            self.generate_proxy_creation(i)

        # Stub
        self.generate_stub_introspection()
        self.generate_stub_intro()
        self.declare_types_stub()
        for i in self.ifaces:
            self.define_types_stub_creation(i)
            self.define_types_method_handlers_stub(i)
            self.define_types_property_get_handlers_stub(i)
            self.define_types_property_set_handlers_stub(i)
            self.define_types_signal_emitters_stub(i)
            self.define_types_dbus_callbacks_stub(i)
            self.define_types_property_setters_stub(i)
            self.define_types_emit_stub(i)

        # Common
        self.generate_common_intro()
        for i in self.ifaces:
            self.generate_common_classes(i)
