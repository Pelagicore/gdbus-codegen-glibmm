/*
 * Generated by gdbus-codegen-glibmm 2.42.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#include "OUTPUT_DIR/input_proxy.h"

void org::gdbus::codegen::glibmm::Test::TestStringVariantDict(
    const std::map<Glib::ustring,Glib::VariantBase> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringVariantDict_pack(
        arg_Param1);

    m_proxy->call("TestStringVariantDict", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestStringVariantDict_finish(
    std::map<Glib::ustring,Glib::VariantBase> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::map<Glib::ustring,Glib::VariantBase>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

/**
 * TestStringStringDict:
 *   @Param1: the dictionary of strings
 *   @Param2: the output dictionary
 * This method tests sending and receiving a dictionary of strings
 */
void org::gdbus::codegen::glibmm::Test::TestStringStringDict(
    const std::map<Glib::ustring,Glib::ustring> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringStringDict_pack(
        arg_Param1);

    m_proxy->call("TestStringStringDict", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestStringStringDict_finish(
    std::map<Glib::ustring,Glib::ustring> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::map<Glib::ustring,Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestUintIntDict(
    const std::map<guint32,gint32> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUintIntDict_pack(
        arg_Param1);

    m_proxy->call("TestUintIntDict", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestUintIntDict_finish(
    std::map<guint32,gint32> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::map<guint32,gint32>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestVariant_finish(
    Glib::VariantBase &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    GVariant *output;
    g_variant_get_child(wrapped.gobj(), 0, "v", &output);
    out_Param2 = Glib::VariantBase(output);
}

void org::gdbus::codegen::glibmm::Test::TestByteStringArray(
    const std::vector<std::string> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestByteStringArray_pack(
        arg_Param1);

    m_proxy->call("TestByteStringArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestByteStringArray_finish(
    std::vector<std::string> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::string>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestObjectPathArray(
    const std::vector<Glib::DBusObjectPathString> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestObjectPathArray_pack(
        arg_Param1);

    m_proxy->call("TestObjectPathArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestObjectPathArray_finish(
    std::vector<Glib::DBusObjectPathString> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<Glib::DBusObjectPathString>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestStringArray(
    const std::vector<Glib::ustring> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringArray_pack(
        arg_Param1);

    m_proxy->call("TestStringArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestStringArray_finish(
    std::vector<Glib::ustring> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestByteString(
    const std::string & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestByteString_pack(
        arg_Param1);

    m_proxy->call("TestByteString", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestByteString_finish(
    std::string &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::string> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestStruct(
    const std::tuple<Glib::ustring,Glib::ustring> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStruct_pack(
        arg_Param1);

    m_proxy->call("TestStruct", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestStruct_finish(
    std::tuple<Glib::ustring,Glib::ustring> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::tuple<Glib::ustring,Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestStructArray(
    const std::vector<std::tuple<guint32,Glib::ustring,gint32>> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStructArray_pack(
        arg_Param1);

    m_proxy->call("TestStructArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestStructArray_finish(
    std::vector<std::tuple<guint32,Glib::ustring,gint32>> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::tuple<guint32,Glib::ustring,gint32>>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestDictStructArray(
    const std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestDictStructArray_pack(
        arg_Param1);

    m_proxy->call("TestDictStructArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestDictStructArray_finish(
    std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestSignature(
    const Glib::DBusSignatureString & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestSignature_pack(
        arg_Param1);

    m_proxy->call("TestSignature", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestSignature_finish(
    Glib::DBusSignatureString &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<Glib::DBusSignatureString> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestObjectPath(
    const Glib::DBusObjectPathString & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestObjectPath_pack(
        arg_Param1);

    m_proxy->call("TestObjectPath", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestObjectPath_finish(
    Glib::DBusObjectPathString &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<Glib::DBusObjectPathString> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestString(
    const Glib::ustring & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestString_pack(
        arg_Param1);

    m_proxy->call("TestString", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestString_finish(
    Glib::ustring &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<Glib::ustring> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestDouble(
    double arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestDouble_pack(
        arg_Param1);

    m_proxy->call("TestDouble", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestDouble_finish(
    double &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<double> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestUInt64(
    guint64 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt64_pack(
        arg_Param1);

    m_proxy->call("TestUInt64", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestUInt64_finish(
    guint64 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guint64> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestInt64(
    gint64 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt64_pack(
        arg_Param1);

    m_proxy->call("TestInt64", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestInt64_finish(
    gint64 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<gint64> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestUInt(
    guint32 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt_pack(
        arg_Param1);

    m_proxy->call("TestUInt", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestUInt_finish(
    guint32 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guint32> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestInt(
    gint32 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt_pack(
        arg_Param1);

    m_proxy->call("TestInt", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestInt_finish(
    gint32 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<gint32> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestUInt16(
    guint16 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt16_pack(
        arg_Param1);

    m_proxy->call("TestUInt16", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestUInt16_finish(
    guint16 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guint16> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestInt16(
    gint16 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt16_pack(
        arg_Param1);

    m_proxy->call("TestInt16", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestInt16_finish(
    gint16 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<gint16> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestChar(
    guchar arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestChar_pack(
        arg_Param1);

    m_proxy->call("TestChar", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestChar_finish(
    guchar &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guchar> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestBoolean(
    bool arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestBoolean_pack(
        arg_Param1);

    m_proxy->call("TestBoolean", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestBoolean_finish(
    bool &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<bool> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestAll(
    const std::vector<std::string> & arg_in_Param1,
    const std::vector<Glib::DBusObjectPathString> & arg_in_Param2,
    const std::vector<Glib::ustring> & arg_in_Param3,
    const std::string & arg_in_Param4,
    const Glib::DBusSignatureString & arg_in_Param5,
    const Glib::DBusObjectPathString & arg_in_Param6,
    const Glib::ustring & arg_in_Param7,
    double arg_in_Param8,
    guint64 arg_in_Param9,
    gint64 arg_in_Param10,
    guint32 arg_in_Param11,
    gint32 arg_in_Param12,
    guint16 arg_in_Param13,
    gint16 arg_in_Param14,
    guchar arg_in_Param15,
    bool arg_in_Param16,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestAll_pack(
        arg_in_Param1,
        arg_in_Param2,
        arg_in_Param3,
        arg_in_Param4,
        arg_in_Param5,
        arg_in_Param6,
        arg_in_Param7,
        arg_in_Param8,
        arg_in_Param9,
        arg_in_Param10,
        arg_in_Param11,
        arg_in_Param12,
        arg_in_Param13,
        arg_in_Param14,
        arg_in_Param15,
        arg_in_Param16);

    m_proxy->call("TestAll", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestAll_finish(
    std::vector<std::string> &out_out_Param1,
    std::vector<Glib::DBusObjectPathString> &out_out_Param2,
    std::vector<Glib::ustring> &out_out_Param3,
    std::string &out_out_Param4,
    Glib::DBusSignatureString &out_out_Param5,
    Glib::DBusObjectPathString &out_out_Param6,
    Glib::ustring &out_out_Param7,
    double &out_out_Param8,
    guint64 &out_out_Param9,
    gint64 &out_out_Param10,
    guint32 &out_out_Param11,
    gint32 &out_out_Param12,
    guint16 &out_out_Param13,
    gint16 &out_out_Param14,
    guchar &out_out_Param15,
    bool &out_out_Param16,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::string>> out_out_Param1_v;
    wrapped.get_child(out_out_Param1_v, 0);
    out_out_Param1 = out_out_Param1_v.get();

    Glib::Variant<std::vector<Glib::DBusObjectPathString>> out_out_Param2_v;
    wrapped.get_child(out_out_Param2_v, 1);
    out_out_Param2 = out_out_Param2_v.get();

    Glib::Variant<std::vector<Glib::ustring>> out_out_Param3_v;
    wrapped.get_child(out_out_Param3_v, 2);
    out_out_Param3 = out_out_Param3_v.get();

    Glib::Variant<std::string> out_out_Param4_v;
    wrapped.get_child(out_out_Param4_v, 3);
    out_out_Param4 = out_out_Param4_v.get();

    Glib::Variant<Glib::DBusSignatureString> out_out_Param5_v;
    wrapped.get_child(out_out_Param5_v, 4);
    out_out_Param5 = out_out_Param5_v.get();

    Glib::Variant<Glib::DBusObjectPathString> out_out_Param6_v;
    wrapped.get_child(out_out_Param6_v, 5);
    out_out_Param6 = out_out_Param6_v.get();

    Glib::Variant<Glib::ustring> out_out_Param7_v;
    wrapped.get_child(out_out_Param7_v, 6);
    out_out_Param7 = out_out_Param7_v.get();

    Glib::Variant<double> out_out_Param8_v;
    wrapped.get_child(out_out_Param8_v, 7);
    out_out_Param8 = out_out_Param8_v.get();

    Glib::Variant<guint64> out_out_Param9_v;
    wrapped.get_child(out_out_Param9_v, 8);
    out_out_Param9 = out_out_Param9_v.get();

    Glib::Variant<gint64> out_out_Param10_v;
    wrapped.get_child(out_out_Param10_v, 9);
    out_out_Param10 = out_out_Param10_v.get();

    Glib::Variant<guint32> out_out_Param11_v;
    wrapped.get_child(out_out_Param11_v, 10);
    out_out_Param11 = out_out_Param11_v.get();

    Glib::Variant<gint32> out_out_Param12_v;
    wrapped.get_child(out_out_Param12_v, 11);
    out_out_Param12 = out_out_Param12_v.get();

    Glib::Variant<guint16> out_out_Param13_v;
    wrapped.get_child(out_out_Param13_v, 12);
    out_out_Param13 = out_out_Param13_v.get();

    Glib::Variant<gint16> out_out_Param14_v;
    wrapped.get_child(out_out_Param14_v, 13);
    out_out_Param14 = out_out_Param14_v.get();

    Glib::Variant<guchar> out_out_Param15_v;
    wrapped.get_child(out_out_Param15_v, 14);
    out_out_Param15 = out_out_Param15_v.get();

    Glib::Variant<bool> out_out_Param16_v;
    wrapped.get_child(out_out_Param16_v, 15);
    out_out_Param16 = out_out_Param16_v.get();
}

void org::gdbus::codegen::glibmm::Test::TestTriggerInternalPropertyChange(
    gint32 arg_NewPropertyValue,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestTriggerInternalPropertyChange_pack(
        arg_NewPropertyValue);

    m_proxy->call("TestTriggerInternalPropertyChange", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::Test::TestTriggerInternalPropertyChange_finish(
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);
}

std::vector<std::string> org::gdbus::codegen::glibmm::Test::TestPropReadByteStringArray_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<std::vector<std::string>> b;
    if (std::find(props.begin(), props.end(), "TestPropReadByteStringArray") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadByteStringArray");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

std::vector<Glib::DBusObjectPathString> org::gdbus::codegen::glibmm::Test::TestPropReadObjectPathArray_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<std::vector<Glib::DBusObjectPathString>> b;
    if (std::find(props.begin(), props.end(), "TestPropReadObjectPathArray") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadObjectPathArray");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

std::vector<Glib::ustring> org::gdbus::codegen::glibmm::Test::TestPropReadStringArray_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<std::vector<Glib::ustring>> b;
    if (std::find(props.begin(), props.end(), "TestPropReadStringArray") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadStringArray");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

std::string org::gdbus::codegen::glibmm::Test::TestPropReadByteString_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<std::string> b;
    if (std::find(props.begin(), props.end(), "TestPropReadByteString") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadByteString");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

Glib::DBusSignatureString org::gdbus::codegen::glibmm::Test::TestPropReadSignature_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<Glib::DBusSignatureString> b;
    if (std::find(props.begin(), props.end(), "TestPropReadSignature") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadSignature");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

Glib::DBusObjectPathString org::gdbus::codegen::glibmm::Test::TestPropReadObjectPath_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<Glib::DBusObjectPathString> b;
    if (std::find(props.begin(), props.end(), "TestPropReadObjectPath") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadObjectPath");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

Glib::ustring org::gdbus::codegen::glibmm::Test::TestPropReadString_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<Glib::ustring> b;
    if (std::find(props.begin(), props.end(), "TestPropReadString") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadString");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

double org::gdbus::codegen::glibmm::Test::TestPropReadDouble_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<double> b;
    if (std::find(props.begin(), props.end(), "TestPropReadDouble") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadDouble");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

guint64 org::gdbus::codegen::glibmm::Test::TestPropReadUInt64_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<guint64> b;
    if (std::find(props.begin(), props.end(), "TestPropReadUInt64") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadUInt64");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

gint64 org::gdbus::codegen::glibmm::Test::TestPropReadInt64_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<gint64> b;
    if (std::find(props.begin(), props.end(), "TestPropReadInt64") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadInt64");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

guint32 org::gdbus::codegen::glibmm::Test::TestPropReadUInt_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<guint32> b;
    if (std::find(props.begin(), props.end(), "TestPropReadUInt") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadUInt");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

gint32 org::gdbus::codegen::glibmm::Test::TestPropReadInt_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<gint32> b;
    if (std::find(props.begin(), props.end(), "TestPropReadInt") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadInt");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

guint16 org::gdbus::codegen::glibmm::Test::TestPropReadUInt16_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<guint16> b;
    if (std::find(props.begin(), props.end(), "TestPropReadUInt16") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadUInt16");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

gint16 org::gdbus::codegen::glibmm::Test::TestPropReadInt16_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<gint16> b;
    if (std::find(props.begin(), props.end(), "TestPropReadInt16") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadInt16");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

guchar org::gdbus::codegen::glibmm::Test::TestPropReadChar_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<guchar> b;
    if (std::find(props.begin(), props.end(), "TestPropReadChar") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadChar");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

bool org::gdbus::codegen::glibmm::Test::TestPropReadBoolean_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<bool> b;
    if (std::find(props.begin(), props.end(), "TestPropReadBoolean") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadBoolean");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

gint32 org::gdbus::codegen::glibmm::Test::TestPropInternalReadPropertyChange_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<gint32> b;
    if (std::find(props.begin(), props.end(), "TestPropInternalReadPropertyChange") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropInternalReadPropertyChange");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteByteStringArray_set(const std::vector<std::string> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteByteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<std::string>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteByteStringArray_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteObjectPathArray_set(const std::vector<Glib::DBusObjectPathString> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteObjectPathArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::DBusObjectPathString>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteObjectPathArray_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteStringArray_set(const std::vector<Glib::ustring> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::ustring>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteStringArray_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteByteString_set(const std::string & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteByteString"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::string>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteByteString_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteSignature_set(const Glib::DBusSignatureString & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteSignature"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusSignatureString>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteSignature_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteObjectPath_set(const Glib::DBusObjectPathString & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteObjectPath"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusObjectPathString>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteObjectPath_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteString_set(const Glib::ustring & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteString"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::ustring>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteString_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteDouble_set(double value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteDouble"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<double>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteDouble_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteUInt64_set(guint64 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteUInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint64>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteUInt64_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteInt64_set(gint64 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint64>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteInt64_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteUInt_set(guint32 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteUInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint32>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteUInt_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteInt_set(gint32 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint32>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteInt_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteUInt16_set(guint16 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteUInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint16>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteUInt16_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteInt16_set(gint16 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint16>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteInt16_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteChar_set(guchar value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteChar"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guchar>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteChar_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteBoolean_set(bool value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteBoolean"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<bool>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropWriteBoolean_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

std::vector<std::string> org::gdbus::codegen::glibmm::Test::TestPropReadWriteByteStringArray_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<std::vector<std::string>> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteByteStringArray") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteByteStringArray");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteByteStringArray_set(const std::vector<std::string> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteByteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<std::string>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteByteStringArray_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

std::vector<Glib::DBusObjectPathString> org::gdbus::codegen::glibmm::Test::TestPropReadWriteObjectPathArray_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<std::vector<Glib::DBusObjectPathString>> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteObjectPathArray") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteObjectPathArray");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteObjectPathArray_set(const std::vector<Glib::DBusObjectPathString> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteObjectPathArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::DBusObjectPathString>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteObjectPathArray_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

std::vector<Glib::ustring> org::gdbus::codegen::glibmm::Test::TestPropReadWriteStringArray_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<std::vector<Glib::ustring>> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteStringArray") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteStringArray");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteStringArray_set(const std::vector<Glib::ustring> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::ustring>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteStringArray_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

std::string org::gdbus::codegen::glibmm::Test::TestPropReadWriteByteString_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<std::string> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteByteString") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteByteString");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteByteString_set(const std::string & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteByteString"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::string>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteByteString_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

Glib::DBusSignatureString org::gdbus::codegen::glibmm::Test::TestPropReadWriteSignature_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<Glib::DBusSignatureString> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteSignature") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteSignature");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteSignature_set(const Glib::DBusSignatureString & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteSignature"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusSignatureString>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteSignature_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

Glib::DBusObjectPathString org::gdbus::codegen::glibmm::Test::TestPropReadWriteObjectPath_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<Glib::DBusObjectPathString> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteObjectPath") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteObjectPath");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteObjectPath_set(const Glib::DBusObjectPathString & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteObjectPath"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusObjectPathString>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteObjectPath_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

Glib::ustring org::gdbus::codegen::glibmm::Test::TestPropReadWriteString_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<Glib::ustring> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteString") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteString");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteString_set(const Glib::ustring & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteString"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::ustring>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteString_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

double org::gdbus::codegen::glibmm::Test::TestPropReadWriteDouble_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<double> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteDouble") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteDouble");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteDouble_set(double value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteDouble"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<double>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteDouble_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

guint64 org::gdbus::codegen::glibmm::Test::TestPropReadWriteUInt64_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<guint64> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteUInt64") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteUInt64");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteUInt64_set(guint64 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteUInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint64>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteUInt64_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

gint64 org::gdbus::codegen::glibmm::Test::TestPropReadWriteInt64_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<gint64> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteInt64") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteInt64");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteInt64_set(gint64 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint64>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteInt64_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

guint32 org::gdbus::codegen::glibmm::Test::TestPropReadWriteUInt_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<guint32> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteUInt") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteUInt");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteUInt_set(guint32 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteUInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint32>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteUInt_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

gint32 org::gdbus::codegen::glibmm::Test::TestPropReadWriteInt_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<gint32> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteInt") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteInt");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteInt_set(gint32 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint32>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteInt_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

guint16 org::gdbus::codegen::glibmm::Test::TestPropReadWriteUInt16_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<guint16> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteUInt16") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteUInt16");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteUInt16_set(guint16 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteUInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint16>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteUInt16_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

gint16 org::gdbus::codegen::glibmm::Test::TestPropReadWriteInt16_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<gint16> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteInt16") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteInt16");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteInt16_set(gint16 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint16>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteInt16_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

guchar org::gdbus::codegen::glibmm::Test::TestPropReadWriteChar_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<guchar> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteChar") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteChar");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteChar_set(guchar value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteChar"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guchar>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteChar_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

bool org::gdbus::codegen::glibmm::Test::TestPropReadWriteBoolean_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<bool> b;
    if (std::find(props.begin(), props.end(), "TestPropReadWriteBoolean") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropReadWriteBoolean");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteBoolean_set(bool value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteBoolean"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<bool>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropReadWriteBoolean_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

gint32 org::gdbus::codegen::glibmm::Test::TestPropInternalReadWritePropertyChange_get()
{
    std::vector<Glib::ustring> props = m_proxy->get_cached_property_names();
    Glib::Variant<gint32> b;
    if (std::find(props.begin(), props.end(), "TestPropInternalReadWritePropertyChange") != props.end()) {
        m_proxy->get_cached_property(b, "TestPropInternalReadWritePropertyChange");
    } else {
        g_print("Todo: lookup value\n");
    }

    return (b.get());
}

void org::gdbus::codegen::glibmm::Test::TestPropInternalReadWritePropertyChange_set(gint32 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropInternalReadWritePropertyChange"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint32>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::Test::TestPropInternalReadWritePropertyChange_set_finish(const Glib::RefPtr<Gio::AsyncResult>&/* res */) {
}

/**
 * TestSignalByteStringArray: emitted to test arrays of byte arrays.
 *   @Param1: the array of arrays
 */

void org::gdbus::codegen::glibmm::Test::handle_signal(const Glib::ustring&/* sender_name */,
    const Glib::ustring& signal_name,
    const Glib::VariantContainerBase& parameters)
{
    static_cast<void>(signal_name); // maybe unused
    static_cast<void>(parameters); // maybe unused

    if (signal_name == "TestSignalByteStringArray") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<std::vector<std::string>> base_Param1;
        parameters.get_child(base_Param1, 0);
        std::vector<std::string> p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalByteStringArray_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalObjectPathArray") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<std::vector<Glib::DBusObjectPathString>> base_Param1;
        parameters.get_child(base_Param1, 0);
        std::vector<Glib::DBusObjectPathString> p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalObjectPathArray_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalStringArray") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<std::vector<Glib::ustring>> base_Param1;
        parameters.get_child(base_Param1, 0);
        std::vector<Glib::ustring> p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalStringArray_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalByteString") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<std::string> base_Param1;
        parameters.get_child(base_Param1, 0);
        std::string p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalByteString_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalSignature") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<Glib::DBusSignatureString> base_Param1;
        parameters.get_child(base_Param1, 0);
        Glib::DBusSignatureString p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalSignature_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalObjectPath") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<Glib::DBusObjectPathString> base_Param1;
        parameters.get_child(base_Param1, 0);
        Glib::DBusObjectPathString p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalObjectPath_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalString") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<Glib::ustring> base_Param1;
        parameters.get_child(base_Param1, 0);
        Glib::ustring p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalString_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalDouble") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<double> base_Param1;
        parameters.get_child(base_Param1, 0);
        double p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalDouble_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalUInt64") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<guint64> base_Param1;
        parameters.get_child(base_Param1, 0);
        guint64 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalUInt64_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalInt64") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<gint64> base_Param1;
        parameters.get_child(base_Param1, 0);
        gint64 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalInt64_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalUInt") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<guint32> base_Param1;
        parameters.get_child(base_Param1, 0);
        guint32 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalUInt_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalInt") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<gint32> base_Param1;
        parameters.get_child(base_Param1, 0);
        gint32 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalInt_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalUInt16") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<guint16> base_Param1;
        parameters.get_child(base_Param1, 0);
        guint16 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalUInt16_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalInt16") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<gint16> base_Param1;
        parameters.get_child(base_Param1, 0);
        gint16 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalInt16_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalChar") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<guchar> base_Param1;
        parameters.get_child(base_Param1, 0);
        guchar p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalChar_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalBoolean") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<bool> base_Param1;
        parameters.get_child(base_Param1, 0);
        bool p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalBoolean_signal.emit((p_Param1));
    }
}

void org::gdbus::codegen::glibmm::Test::handle_properties_changed(
    const Gio::DBus::Proxy::MapChangedProperties &changed_properties,
    const std::vector<Glib::ustring> &/* invalidated_properties */)
{
    static_cast<void>(changed_properties); // maybe unused

    // Only check changed_properties since value will already be cached. Glib can be setup to get
    // values of invalidated properties in which case property will be in changed_properties when
    // value is actually received. See Gio::DBus::ProxyFlags::PROXY_FLAGS_GET_INVALIDATED_PROPERTIES .

    if (changed_properties.find("TestPropReadByteStringArray") != changed_properties.cend())
        m_TestPropReadByteStringArray_changed.emit();
    if (changed_properties.find("TestPropReadObjectPathArray") != changed_properties.cend())
        m_TestPropReadObjectPathArray_changed.emit();
    if (changed_properties.find("TestPropReadStringArray") != changed_properties.cend())
        m_TestPropReadStringArray_changed.emit();
    if (changed_properties.find("TestPropReadByteString") != changed_properties.cend())
        m_TestPropReadByteString_changed.emit();
    if (changed_properties.find("TestPropReadSignature") != changed_properties.cend())
        m_TestPropReadSignature_changed.emit();
    if (changed_properties.find("TestPropReadObjectPath") != changed_properties.cend())
        m_TestPropReadObjectPath_changed.emit();
    if (changed_properties.find("TestPropReadString") != changed_properties.cend())
        m_TestPropReadString_changed.emit();
    if (changed_properties.find("TestPropReadDouble") != changed_properties.cend())
        m_TestPropReadDouble_changed.emit();
    if (changed_properties.find("TestPropReadUInt64") != changed_properties.cend())
        m_TestPropReadUInt64_changed.emit();
    if (changed_properties.find("TestPropReadInt64") != changed_properties.cend())
        m_TestPropReadInt64_changed.emit();
    if (changed_properties.find("TestPropReadUInt") != changed_properties.cend())
        m_TestPropReadUInt_changed.emit();
    if (changed_properties.find("TestPropReadInt") != changed_properties.cend())
        m_TestPropReadInt_changed.emit();
    if (changed_properties.find("TestPropReadUInt16") != changed_properties.cend())
        m_TestPropReadUInt16_changed.emit();
    if (changed_properties.find("TestPropReadInt16") != changed_properties.cend())
        m_TestPropReadInt16_changed.emit();
    if (changed_properties.find("TestPropReadChar") != changed_properties.cend())
        m_TestPropReadChar_changed.emit();
    if (changed_properties.find("TestPropReadBoolean") != changed_properties.cend())
        m_TestPropReadBoolean_changed.emit();
    if (changed_properties.find("TestPropInternalReadPropertyChange") != changed_properties.cend())
        m_TestPropInternalReadPropertyChange_changed.emit();
    if (changed_properties.find("TestPropWriteByteStringArray") != changed_properties.cend())
        m_TestPropWriteByteStringArray_changed.emit();
    if (changed_properties.find("TestPropWriteObjectPathArray") != changed_properties.cend())
        m_TestPropWriteObjectPathArray_changed.emit();
    if (changed_properties.find("TestPropWriteStringArray") != changed_properties.cend())
        m_TestPropWriteStringArray_changed.emit();
    if (changed_properties.find("TestPropWriteByteString") != changed_properties.cend())
        m_TestPropWriteByteString_changed.emit();
    if (changed_properties.find("TestPropWriteSignature") != changed_properties.cend())
        m_TestPropWriteSignature_changed.emit();
    if (changed_properties.find("TestPropWriteObjectPath") != changed_properties.cend())
        m_TestPropWriteObjectPath_changed.emit();
    if (changed_properties.find("TestPropWriteString") != changed_properties.cend())
        m_TestPropWriteString_changed.emit();
    if (changed_properties.find("TestPropWriteDouble") != changed_properties.cend())
        m_TestPropWriteDouble_changed.emit();
    if (changed_properties.find("TestPropWriteUInt64") != changed_properties.cend())
        m_TestPropWriteUInt64_changed.emit();
    if (changed_properties.find("TestPropWriteInt64") != changed_properties.cend())
        m_TestPropWriteInt64_changed.emit();
    if (changed_properties.find("TestPropWriteUInt") != changed_properties.cend())
        m_TestPropWriteUInt_changed.emit();
    if (changed_properties.find("TestPropWriteInt") != changed_properties.cend())
        m_TestPropWriteInt_changed.emit();
    if (changed_properties.find("TestPropWriteUInt16") != changed_properties.cend())
        m_TestPropWriteUInt16_changed.emit();
    if (changed_properties.find("TestPropWriteInt16") != changed_properties.cend())
        m_TestPropWriteInt16_changed.emit();
    if (changed_properties.find("TestPropWriteChar") != changed_properties.cend())
        m_TestPropWriteChar_changed.emit();
    if (changed_properties.find("TestPropWriteBoolean") != changed_properties.cend())
        m_TestPropWriteBoolean_changed.emit();
    if (changed_properties.find("TestPropReadWriteByteStringArray") != changed_properties.cend())
        m_TestPropReadWriteByteStringArray_changed.emit();
    if (changed_properties.find("TestPropReadWriteObjectPathArray") != changed_properties.cend())
        m_TestPropReadWriteObjectPathArray_changed.emit();
    if (changed_properties.find("TestPropReadWriteStringArray") != changed_properties.cend())
        m_TestPropReadWriteStringArray_changed.emit();
    if (changed_properties.find("TestPropReadWriteByteString") != changed_properties.cend())
        m_TestPropReadWriteByteString_changed.emit();
    if (changed_properties.find("TestPropReadWriteSignature") != changed_properties.cend())
        m_TestPropReadWriteSignature_changed.emit();
    if (changed_properties.find("TestPropReadWriteObjectPath") != changed_properties.cend())
        m_TestPropReadWriteObjectPath_changed.emit();
    if (changed_properties.find("TestPropReadWriteString") != changed_properties.cend())
        m_TestPropReadWriteString_changed.emit();
    if (changed_properties.find("TestPropReadWriteDouble") != changed_properties.cend())
        m_TestPropReadWriteDouble_changed.emit();
    if (changed_properties.find("TestPropReadWriteUInt64") != changed_properties.cend())
        m_TestPropReadWriteUInt64_changed.emit();
    if (changed_properties.find("TestPropReadWriteInt64") != changed_properties.cend())
        m_TestPropReadWriteInt64_changed.emit();
    if (changed_properties.find("TestPropReadWriteUInt") != changed_properties.cend())
        m_TestPropReadWriteUInt_changed.emit();
    if (changed_properties.find("TestPropReadWriteInt") != changed_properties.cend())
        m_TestPropReadWriteInt_changed.emit();
    if (changed_properties.find("TestPropReadWriteUInt16") != changed_properties.cend())
        m_TestPropReadWriteUInt16_changed.emit();
    if (changed_properties.find("TestPropReadWriteInt16") != changed_properties.cend())
        m_TestPropReadWriteInt16_changed.emit();
    if (changed_properties.find("TestPropReadWriteChar") != changed_properties.cend())
        m_TestPropReadWriteChar_changed.emit();
    if (changed_properties.find("TestPropReadWriteBoolean") != changed_properties.cend())
        m_TestPropReadWriteBoolean_changed.emit();
    if (changed_properties.find("TestPropInternalReadWritePropertyChange") != changed_properties.cend())
        m_TestPropInternalReadWritePropertyChange_changed.emit();
}

void org::gdbus::codegen::glibmm::Test::createForBus(
    Gio::DBus::BusType busType,
    Gio::DBus::ProxyFlags proxyFlags,
    const std::string &name,
    const std::string &objectPath,
    const Gio::SlotAsyncReady &slot,
    const Glib::RefPtr<Gio::Cancellable> &cancellable)
{
    Gio::DBus::Proxy::create_for_bus(busType,
        name,
        objectPath,
        "org.gdbus.codegen.glibmm.Test",
        slot,
        cancellable,
        Glib::RefPtr<Gio::DBus::InterfaceInfo>(),
        proxyFlags);
}

Glib::RefPtr<org::gdbus::codegen::glibmm::Test> org::gdbus::codegen::glibmm::Test::createForBusFinish(Glib::RefPtr<Gio::AsyncResult> result)
{
    Glib::RefPtr<Gio::DBus::Proxy> proxy =
        Gio::DBus::Proxy::create_for_bus_finish(result);
    org::gdbus::codegen::glibmm::Test *p =
        new org::gdbus::codegen::glibmm::Test(proxy);
    return Glib::RefPtr<org::gdbus::codegen::glibmm::Test>(p);
}
