/*
 * Generated by gdbus-codegen-glibmm 2.42.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#include "OUTPUT_DIR/input_proxy.h"

#include <utility>

template<class T>
inline T specialGetter(Glib::Variant<T> variant)
{
    return variant.get();
}

template<>
inline std::string specialGetter(Glib::Variant<std::string> variant)
{
    // String is not guaranteed to be null-terminated, so don't use ::get()
    gsize n_elem;
    gsize elem_size = sizeof(char);
    char* data = (char*)g_variant_get_fixed_array(variant.gobj(), &n_elem, elem_size);

    return std::string(data, n_elem);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStringVariantDict(
    const std::map<Glib::ustring,Glib::VariantBase> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringVariantDict_pack(
        arg_Param1);

    m_proxy->call("TestStringVariantDict", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStringVariantDict_finish(
    std::map<Glib::ustring,Glib::VariantBase> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::map<Glib::ustring,Glib::VariantBase>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::map<Glib::ustring,Glib::VariantBase>
org::gdbus::codegen::glibmm::TestProxy::TestStringVariantDict_sync(
    const std::map<Glib::ustring,Glib::VariantBase> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringVariantDict_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestStringVariantDict", cancellable, base, timeout_msec);

    std::map<Glib::ustring,Glib::VariantBase> out_Param2;
    Glib::Variant<std::map<Glib::ustring,Glib::VariantBase>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

/**
 * TestStringStringDict:
 *   @Param1: the dictionary of strings
 *   @Param2: the output dictionary
 * This method tests sending and receiving a dictionary of strings
 */
void org::gdbus::codegen::glibmm::TestProxy::TestStringStringDict(
    const std::map<Glib::ustring,Glib::ustring> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringStringDict_pack(
        arg_Param1);

    m_proxy->call("TestStringStringDict", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStringStringDict_finish(
    std::map<Glib::ustring,Glib::ustring> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::map<Glib::ustring,Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::map<Glib::ustring,Glib::ustring>
org::gdbus::codegen::glibmm::TestProxy::TestStringStringDict_sync(
    const std::map<Glib::ustring,Glib::ustring> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringStringDict_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestStringStringDict", cancellable, base, timeout_msec);

    std::map<Glib::ustring,Glib::ustring> out_Param2;
    Glib::Variant<std::map<Glib::ustring,Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestUintIntDict(
    const std::map<guint32,gint32> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUintIntDict_pack(
        arg_Param1);

    m_proxy->call("TestUintIntDict", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestUintIntDict_finish(
    std::map<guint32,gint32> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::map<guint32,gint32>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::map<guint32,gint32>
org::gdbus::codegen::glibmm::TestProxy::TestUintIntDict_sync(
    const std::map<guint32,gint32> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUintIntDict_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestUintIntDict", cancellable, base, timeout_msec);

    std::map<guint32,gint32> out_Param2;
    Glib::Variant<std::map<guint32,gint32>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestVariant(
    const Glib::VariantBase & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestVariant_pack(
        arg_Param1);

    m_proxy->call("TestVariant", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestVariant_finish(
    Glib::VariantBase &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    GVariant *output;
    g_variant_get_child(wrapped.gobj(), 0, "v", &output);
    out_Param2 = Glib::VariantBase(output);
}

Glib::VariantBase
org::gdbus::codegen::glibmm::TestProxy::TestVariant_sync(
    const Glib::VariantBase & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestVariant_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestVariant", cancellable, base, timeout_msec);

    Glib::VariantBase out_Param2;
    GVariant *output;
    g_variant_get_child(wrapped.gobj(), 0, "v", &output);
    out_Param2 = Glib::VariantBase(output);
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestVariant2(
    const Glib::ustring & arg_Param1,
    const Glib::VariantBase & arg_Param2,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestVariant2_pack(
        arg_Param1,
        arg_Param2);

    m_proxy->call("TestVariant2", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestVariant2_finish(
    Glib::ustring &out_Param3,
    Glib::VariantBase &out_Param4,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<Glib::ustring> out_Param3_v;
    wrapped.get_child(out_Param3_v, 0);
    out_Param3 = out_Param3_v.get();

    GVariant *output;
    g_variant_get_child(wrapped.gobj(), 1, "v", &output);
    out_Param4 = Glib::VariantBase(output);
}

std::tuple<Glib::ustring, Glib::VariantBase>
org::gdbus::codegen::glibmm::TestProxy::TestVariant2_sync(
    const Glib::ustring & arg_Param1,
    const Glib::VariantBase & arg_Param2,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestVariant2_pack(
        arg_Param1,
        arg_Param2);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestVariant2", cancellable, base, timeout_msec);

    Glib::ustring out_Param3;
    Glib::Variant<Glib::ustring> out_Param3_v;
    wrapped.get_child(out_Param3_v, 0);
    out_Param3 = out_Param3_v.get();

    Glib::VariantBase out_Param4;
    GVariant *output;
    g_variant_get_child(wrapped.gobj(), 1, "v", &output);
    out_Param4 = Glib::VariantBase(output);

    return std::make_tuple(
        std::move(out_Param3),
        std::move(out_Param4)
    );
}

void org::gdbus::codegen::glibmm::TestProxy::TestByteStringArray(
    const std::vector<std::string> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestByteStringArray_pack(
        arg_Param1);

    m_proxy->call("TestByteStringArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestByteStringArray_finish(
    std::vector<std::string> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::string>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::vector<std::string>
org::gdbus::codegen::glibmm::TestProxy::TestByteStringArray_sync(
    const std::vector<std::string> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestByteStringArray_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestByteStringArray", cancellable, base, timeout_msec);

    std::vector<std::string> out_Param2;
    Glib::Variant<std::vector<std::string>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestObjectPathArray(
    const std::vector<Glib::DBusObjectPathString> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestObjectPathArray_pack(
        arg_Param1);

    m_proxy->call("TestObjectPathArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestObjectPathArray_finish(
    std::vector<Glib::DBusObjectPathString> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<Glib::DBusObjectPathString>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::vector<Glib::DBusObjectPathString>
org::gdbus::codegen::glibmm::TestProxy::TestObjectPathArray_sync(
    const std::vector<Glib::DBusObjectPathString> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestObjectPathArray_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestObjectPathArray", cancellable, base, timeout_msec);

    std::vector<Glib::DBusObjectPathString> out_Param2;
    Glib::Variant<std::vector<Glib::DBusObjectPathString>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestStringArray(
    const std::vector<Glib::ustring> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringArray_pack(
        arg_Param1);

    m_proxy->call("TestStringArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStringArray_finish(
    std::vector<Glib::ustring> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::vector<Glib::ustring>
org::gdbus::codegen::glibmm::TestProxy::TestStringArray_sync(
    const std::vector<Glib::ustring> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringArray_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestStringArray", cancellable, base, timeout_msec);

    std::vector<Glib::ustring> out_Param2;
    Glib::Variant<std::vector<Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestByteString(
    const std::string & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestByteString_pack(
        arg_Param1);

    m_proxy->call("TestByteString", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestByteString_finish(
    std::string &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::string> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::string
org::gdbus::codegen::glibmm::TestProxy::TestByteString_sync(
    const std::string & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestByteString_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestByteString", cancellable, base, timeout_msec);

    std::string out_Param2;
    Glib::Variant<std::string> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestStruct(
    const std::tuple<Glib::ustring,Glib::ustring> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStruct_pack(
        arg_Param1);

    m_proxy->call("TestStruct", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStruct_finish(
    std::tuple<Glib::ustring,Glib::ustring> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::tuple<Glib::ustring,Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::tuple<Glib::ustring,Glib::ustring>
org::gdbus::codegen::glibmm::TestProxy::TestStruct_sync(
    const std::tuple<Glib::ustring,Glib::ustring> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStruct_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestStruct", cancellable, base, timeout_msec);

    std::tuple<Glib::ustring,Glib::ustring> out_Param2;
    Glib::Variant<std::tuple<Glib::ustring,Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestStructArray(
    const std::vector<std::tuple<guint32,Glib::ustring,gint32>> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStructArray_pack(
        arg_Param1);

    m_proxy->call("TestStructArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStructArray_finish(
    std::vector<std::tuple<guint32,Glib::ustring,gint32>> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::tuple<guint32,Glib::ustring,gint32>>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::vector<std::tuple<guint32,Glib::ustring,gint32>>
org::gdbus::codegen::glibmm::TestProxy::TestStructArray_sync(
    const std::vector<std::tuple<guint32,Glib::ustring,gint32>> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStructArray_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestStructArray", cancellable, base, timeout_msec);

    std::vector<std::tuple<guint32,Glib::ustring,gint32>> out_Param2;
    Glib::Variant<std::vector<std::tuple<guint32,Glib::ustring,gint32>>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestDictStructArray(
    const std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestDictStructArray_pack(
        arg_Param1);

    m_proxy->call("TestDictStructArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestDictStructArray_finish(
    std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>>
org::gdbus::codegen::glibmm::TestProxy::TestDictStructArray_sync(
    const std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestDictStructArray_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestDictStructArray", cancellable, base, timeout_msec);

    std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>> out_Param2;
    Glib::Variant<std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestSignature(
    const Glib::DBusSignatureString & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestSignature_pack(
        arg_Param1);

    m_proxy->call("TestSignature", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestSignature_finish(
    Glib::DBusSignatureString &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<Glib::DBusSignatureString> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

Glib::DBusSignatureString
org::gdbus::codegen::glibmm::TestProxy::TestSignature_sync(
    const Glib::DBusSignatureString & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestSignature_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestSignature", cancellable, base, timeout_msec);

    Glib::DBusSignatureString out_Param2;
    Glib::Variant<Glib::DBusSignatureString> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestObjectPath(
    const Glib::DBusObjectPathString & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestObjectPath_pack(
        arg_Param1);

    m_proxy->call("TestObjectPath", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestObjectPath_finish(
    Glib::DBusObjectPathString &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<Glib::DBusObjectPathString> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

Glib::DBusObjectPathString
org::gdbus::codegen::glibmm::TestProxy::TestObjectPath_sync(
    const Glib::DBusObjectPathString & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestObjectPath_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestObjectPath", cancellable, base, timeout_msec);

    Glib::DBusObjectPathString out_Param2;
    Glib::Variant<Glib::DBusObjectPathString> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestString(
    const Glib::ustring & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestString_pack(
        arg_Param1);

    m_proxy->call("TestString", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestString_finish(
    Glib::ustring &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<Glib::ustring> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

Glib::ustring
org::gdbus::codegen::glibmm::TestProxy::TestString_sync(
    const Glib::ustring & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestString_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestString", cancellable, base, timeout_msec);

    Glib::ustring out_Param2;
    Glib::Variant<Glib::ustring> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestDouble(
    double arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestDouble_pack(
        arg_Param1);

    m_proxy->call("TestDouble", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestDouble_finish(
    double &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<double> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

double
org::gdbus::codegen::glibmm::TestProxy::TestDouble_sync(
    double arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestDouble_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestDouble", cancellable, base, timeout_msec);

    double out_Param2;
    Glib::Variant<double> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt64(
    guint64 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt64_pack(
        arg_Param1);

    m_proxy->call("TestUInt64", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt64_finish(
    guint64 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guint64> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

guint64
org::gdbus::codegen::glibmm::TestProxy::TestUInt64_sync(
    guint64 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt64_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestUInt64", cancellable, base, timeout_msec);

    guint64 out_Param2;
    Glib::Variant<guint64> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt64(
    gint64 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt64_pack(
        arg_Param1);

    m_proxy->call("TestInt64", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt64_finish(
    gint64 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<gint64> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

gint64
org::gdbus::codegen::glibmm::TestProxy::TestInt64_sync(
    gint64 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt64_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestInt64", cancellable, base, timeout_msec);

    gint64 out_Param2;
    Glib::Variant<gint64> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt(
    guint32 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt_pack(
        arg_Param1);

    m_proxy->call("TestUInt", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt_finish(
    guint32 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guint32> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

guint32
org::gdbus::codegen::glibmm::TestProxy::TestUInt_sync(
    guint32 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestUInt", cancellable, base, timeout_msec);

    guint32 out_Param2;
    Glib::Variant<guint32> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt(
    gint32 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt_pack(
        arg_Param1);

    m_proxy->call("TestInt", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt_finish(
    gint32 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<gint32> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

gint32
org::gdbus::codegen::glibmm::TestProxy::TestInt_sync(
    gint32 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestInt", cancellable, base, timeout_msec);

    gint32 out_Param2;
    Glib::Variant<gint32> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt16(
    guint16 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt16_pack(
        arg_Param1);

    m_proxy->call("TestUInt16", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt16_finish(
    guint16 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guint16> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

guint16
org::gdbus::codegen::glibmm::TestProxy::TestUInt16_sync(
    guint16 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt16_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestUInt16", cancellable, base, timeout_msec);

    guint16 out_Param2;
    Glib::Variant<guint16> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt16(
    gint16 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt16_pack(
        arg_Param1);

    m_proxy->call("TestInt16", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt16_finish(
    gint16 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<gint16> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

gint16
org::gdbus::codegen::glibmm::TestProxy::TestInt16_sync(
    gint16 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt16_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestInt16", cancellable, base, timeout_msec);

    gint16 out_Param2;
    Glib::Variant<gint16> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestChar(
    guchar arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestChar_pack(
        arg_Param1);

    m_proxy->call("TestChar", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestChar_finish(
    guchar &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guchar> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

guchar
org::gdbus::codegen::glibmm::TestProxy::TestChar_sync(
    guchar arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestChar_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestChar", cancellable, base, timeout_msec);

    guchar out_Param2;
    Glib::Variant<guchar> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestBoolean(
    bool arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestBoolean_pack(
        arg_Param1);

    m_proxy->call("TestBoolean", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestBoolean_finish(
    bool &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<bool> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

bool
org::gdbus::codegen::glibmm::TestProxy::TestBoolean_sync(
    bool arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestBoolean_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestBoolean", cancellable, base, timeout_msec);

    bool out_Param2;
    Glib::Variant<bool> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestAll(
    const std::vector<std::string> & arg_in_Param1,
    const std::vector<Glib::DBusObjectPathString> & arg_in_Param2,
    const std::vector<Glib::ustring> & arg_in_Param3,
    const std::string & arg_in_Param4,
    const Glib::DBusSignatureString & arg_in_Param5,
    const Glib::DBusObjectPathString & arg_in_Param6,
    const Glib::ustring & arg_in_Param7,
    double arg_in_Param8,
    guint64 arg_in_Param9,
    gint64 arg_in_Param10,
    guint32 arg_in_Param11,
    gint32 arg_in_Param12,
    guint16 arg_in_Param13,
    gint16 arg_in_Param14,
    guchar arg_in_Param15,
    bool arg_in_Param16,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestAll_pack(
        arg_in_Param1,
        arg_in_Param2,
        arg_in_Param3,
        arg_in_Param4,
        arg_in_Param5,
        arg_in_Param6,
        arg_in_Param7,
        arg_in_Param8,
        arg_in_Param9,
        arg_in_Param10,
        arg_in_Param11,
        arg_in_Param12,
        arg_in_Param13,
        arg_in_Param14,
        arg_in_Param15,
        arg_in_Param16);

    m_proxy->call("TestAll", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestAll_finish(
    std::vector<std::string> &out_out_Param1,
    std::vector<Glib::DBusObjectPathString> &out_out_Param2,
    std::vector<Glib::ustring> &out_out_Param3,
    std::string &out_out_Param4,
    Glib::DBusSignatureString &out_out_Param5,
    Glib::DBusObjectPathString &out_out_Param6,
    Glib::ustring &out_out_Param7,
    double &out_out_Param8,
    guint64 &out_out_Param9,
    gint64 &out_out_Param10,
    guint32 &out_out_Param11,
    gint32 &out_out_Param12,
    guint16 &out_out_Param13,
    gint16 &out_out_Param14,
    guchar &out_out_Param15,
    bool &out_out_Param16,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::string>> out_out_Param1_v;
    wrapped.get_child(out_out_Param1_v, 0);
    out_out_Param1 = out_out_Param1_v.get();

    Glib::Variant<std::vector<Glib::DBusObjectPathString>> out_out_Param2_v;
    wrapped.get_child(out_out_Param2_v, 1);
    out_out_Param2 = out_out_Param2_v.get();

    Glib::Variant<std::vector<Glib::ustring>> out_out_Param3_v;
    wrapped.get_child(out_out_Param3_v, 2);
    out_out_Param3 = out_out_Param3_v.get();

    Glib::Variant<std::string> out_out_Param4_v;
    wrapped.get_child(out_out_Param4_v, 3);
    out_out_Param4 = out_out_Param4_v.get();

    Glib::Variant<Glib::DBusSignatureString> out_out_Param5_v;
    wrapped.get_child(out_out_Param5_v, 4);
    out_out_Param5 = out_out_Param5_v.get();

    Glib::Variant<Glib::DBusObjectPathString> out_out_Param6_v;
    wrapped.get_child(out_out_Param6_v, 5);
    out_out_Param6 = out_out_Param6_v.get();

    Glib::Variant<Glib::ustring> out_out_Param7_v;
    wrapped.get_child(out_out_Param7_v, 6);
    out_out_Param7 = out_out_Param7_v.get();

    Glib::Variant<double> out_out_Param8_v;
    wrapped.get_child(out_out_Param8_v, 7);
    out_out_Param8 = out_out_Param8_v.get();

    Glib::Variant<guint64> out_out_Param9_v;
    wrapped.get_child(out_out_Param9_v, 8);
    out_out_Param9 = out_out_Param9_v.get();

    Glib::Variant<gint64> out_out_Param10_v;
    wrapped.get_child(out_out_Param10_v, 9);
    out_out_Param10 = out_out_Param10_v.get();

    Glib::Variant<guint32> out_out_Param11_v;
    wrapped.get_child(out_out_Param11_v, 10);
    out_out_Param11 = out_out_Param11_v.get();

    Glib::Variant<gint32> out_out_Param12_v;
    wrapped.get_child(out_out_Param12_v, 11);
    out_out_Param12 = out_out_Param12_v.get();

    Glib::Variant<guint16> out_out_Param13_v;
    wrapped.get_child(out_out_Param13_v, 12);
    out_out_Param13 = out_out_Param13_v.get();

    Glib::Variant<gint16> out_out_Param14_v;
    wrapped.get_child(out_out_Param14_v, 13);
    out_out_Param14 = out_out_Param14_v.get();

    Glib::Variant<guchar> out_out_Param15_v;
    wrapped.get_child(out_out_Param15_v, 14);
    out_out_Param15 = out_out_Param15_v.get();

    Glib::Variant<bool> out_out_Param16_v;
    wrapped.get_child(out_out_Param16_v, 15);
    out_out_Param16 = out_out_Param16_v.get();
}

std::tuple<std::vector<std::string>, std::vector<Glib::DBusObjectPathString>, std::vector<Glib::ustring>, std::string, Glib::DBusSignatureString, Glib::DBusObjectPathString, Glib::ustring, double, guint64, gint64, guint32, gint32, guint16, gint16, guchar, bool>
org::gdbus::codegen::glibmm::TestProxy::TestAll_sync(
    const std::vector<std::string> & arg_in_Param1,
    const std::vector<Glib::DBusObjectPathString> & arg_in_Param2,
    const std::vector<Glib::ustring> & arg_in_Param3,
    const std::string & arg_in_Param4,
    const Glib::DBusSignatureString & arg_in_Param5,
    const Glib::DBusObjectPathString & arg_in_Param6,
    const Glib::ustring & arg_in_Param7,
    double arg_in_Param8,
    guint64 arg_in_Param9,
    gint64 arg_in_Param10,
    guint32 arg_in_Param11,
    gint32 arg_in_Param12,
    guint16 arg_in_Param13,
    gint16 arg_in_Param14,
    guchar arg_in_Param15,
    bool arg_in_Param16,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestAll_pack(
        arg_in_Param1,
        arg_in_Param2,
        arg_in_Param3,
        arg_in_Param4,
        arg_in_Param5,
        arg_in_Param6,
        arg_in_Param7,
        arg_in_Param8,
        arg_in_Param9,
        arg_in_Param10,
        arg_in_Param11,
        arg_in_Param12,
        arg_in_Param13,
        arg_in_Param14,
        arg_in_Param15,
        arg_in_Param16);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestAll", cancellable, base, timeout_msec);

    std::vector<std::string> out_out_Param1;
    Glib::Variant<std::vector<std::string>> out_out_Param1_v;
    wrapped.get_child(out_out_Param1_v, 0);
    out_out_Param1 = out_out_Param1_v.get();

    std::vector<Glib::DBusObjectPathString> out_out_Param2;
    Glib::Variant<std::vector<Glib::DBusObjectPathString>> out_out_Param2_v;
    wrapped.get_child(out_out_Param2_v, 1);
    out_out_Param2 = out_out_Param2_v.get();

    std::vector<Glib::ustring> out_out_Param3;
    Glib::Variant<std::vector<Glib::ustring>> out_out_Param3_v;
    wrapped.get_child(out_out_Param3_v, 2);
    out_out_Param3 = out_out_Param3_v.get();

    std::string out_out_Param4;
    Glib::Variant<std::string> out_out_Param4_v;
    wrapped.get_child(out_out_Param4_v, 3);
    out_out_Param4 = out_out_Param4_v.get();

    Glib::DBusSignatureString out_out_Param5;
    Glib::Variant<Glib::DBusSignatureString> out_out_Param5_v;
    wrapped.get_child(out_out_Param5_v, 4);
    out_out_Param5 = out_out_Param5_v.get();

    Glib::DBusObjectPathString out_out_Param6;
    Glib::Variant<Glib::DBusObjectPathString> out_out_Param6_v;
    wrapped.get_child(out_out_Param6_v, 5);
    out_out_Param6 = out_out_Param6_v.get();

    Glib::ustring out_out_Param7;
    Glib::Variant<Glib::ustring> out_out_Param7_v;
    wrapped.get_child(out_out_Param7_v, 6);
    out_out_Param7 = out_out_Param7_v.get();

    double out_out_Param8;
    Glib::Variant<double> out_out_Param8_v;
    wrapped.get_child(out_out_Param8_v, 7);
    out_out_Param8 = out_out_Param8_v.get();

    guint64 out_out_Param9;
    Glib::Variant<guint64> out_out_Param9_v;
    wrapped.get_child(out_out_Param9_v, 8);
    out_out_Param9 = out_out_Param9_v.get();

    gint64 out_out_Param10;
    Glib::Variant<gint64> out_out_Param10_v;
    wrapped.get_child(out_out_Param10_v, 9);
    out_out_Param10 = out_out_Param10_v.get();

    guint32 out_out_Param11;
    Glib::Variant<guint32> out_out_Param11_v;
    wrapped.get_child(out_out_Param11_v, 10);
    out_out_Param11 = out_out_Param11_v.get();

    gint32 out_out_Param12;
    Glib::Variant<gint32> out_out_Param12_v;
    wrapped.get_child(out_out_Param12_v, 11);
    out_out_Param12 = out_out_Param12_v.get();

    guint16 out_out_Param13;
    Glib::Variant<guint16> out_out_Param13_v;
    wrapped.get_child(out_out_Param13_v, 12);
    out_out_Param13 = out_out_Param13_v.get();

    gint16 out_out_Param14;
    Glib::Variant<gint16> out_out_Param14_v;
    wrapped.get_child(out_out_Param14_v, 13);
    out_out_Param14 = out_out_Param14_v.get();

    guchar out_out_Param15;
    Glib::Variant<guchar> out_out_Param15_v;
    wrapped.get_child(out_out_Param15_v, 14);
    out_out_Param15 = out_out_Param15_v.get();

    bool out_out_Param16;
    Glib::Variant<bool> out_out_Param16_v;
    wrapped.get_child(out_out_Param16_v, 15);
    out_out_Param16 = out_out_Param16_v.get();

    return std::make_tuple(
        std::move(out_out_Param1),
        std::move(out_out_Param2),
        std::move(out_out_Param3),
        std::move(out_out_Param4),
        std::move(out_out_Param5),
        std::move(out_out_Param6),
        std::move(out_out_Param7),
        std::move(out_out_Param8),
        std::move(out_out_Param9),
        std::move(out_out_Param10),
        std::move(out_out_Param11),
        std::move(out_out_Param12),
        std::move(out_out_Param13),
        std::move(out_out_Param14),
        std::move(out_out_Param15),
        std::move(out_out_Param16)
    );
}

void org::gdbus::codegen::glibmm::TestProxy::TestTriggerInternalPropertyChange(
    gint32 arg_NewPropertyValue,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestTriggerInternalPropertyChange_pack(
        arg_NewPropertyValue);

    m_proxy->call("TestTriggerInternalPropertyChange", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestTriggerInternalPropertyChange_finish(
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);
}

void
org::gdbus::codegen::glibmm::TestProxy::TestTriggerInternalPropertyChange_sync(
    gint32 arg_NewPropertyValue,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestTriggerInternalPropertyChange_pack(
        arg_NewPropertyValue);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestTriggerInternalPropertyChange", cancellable, base, timeout_msec);

}

std::vector<std::string> org::gdbus::codegen::glibmm::TestProxy::TestPropReadByteStringArray_get(bool *ok)
{
    Glib::Variant<std::vector<std::string>> b;
    m_proxy->get_cached_property(b, "TestPropReadByteStringArray");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadByteStringArray");
        }
        return std::vector<std::string>();
    }

}

std::vector<Glib::DBusObjectPathString> org::gdbus::codegen::glibmm::TestProxy::TestPropReadObjectPathArray_get(bool *ok)
{
    Glib::Variant<std::vector<Glib::DBusObjectPathString>> b;
    m_proxy->get_cached_property(b, "TestPropReadObjectPathArray");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadObjectPathArray");
        }
        return std::vector<Glib::DBusObjectPathString>();
    }

}

std::vector<Glib::ustring> org::gdbus::codegen::glibmm::TestProxy::TestPropReadStringArray_get(bool *ok)
{
    Glib::Variant<std::vector<Glib::ustring>> b;
    m_proxy->get_cached_property(b, "TestPropReadStringArray");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadStringArray");
        }
        return std::vector<Glib::ustring>();
    }

}

std::string org::gdbus::codegen::glibmm::TestProxy::TestPropReadByteString_get(bool *ok)
{
    Glib::Variant<std::string> b;
    m_proxy->get_cached_property(b, "TestPropReadByteString");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadByteString");
        }
        return std::string();
    }

}

Glib::DBusSignatureString org::gdbus::codegen::glibmm::TestProxy::TestPropReadSignature_get(bool *ok)
{
    Glib::Variant<Glib::DBusSignatureString> b;
    m_proxy->get_cached_property(b, "TestPropReadSignature");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadSignature");
        }
        return Glib::DBusSignatureString();
    }

}

Glib::DBusObjectPathString org::gdbus::codegen::glibmm::TestProxy::TestPropReadObjectPath_get(bool *ok)
{
    Glib::Variant<Glib::DBusObjectPathString> b;
    m_proxy->get_cached_property(b, "TestPropReadObjectPath");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadObjectPath");
        }
        return Glib::DBusObjectPathString();
    }

}

Glib::ustring org::gdbus::codegen::glibmm::TestProxy::TestPropReadString_get(bool *ok)
{
    Glib::Variant<Glib::ustring> b;
    m_proxy->get_cached_property(b, "TestPropReadString");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadString");
        }
        return Glib::ustring();
    }

}

double org::gdbus::codegen::glibmm::TestProxy::TestPropReadDouble_get(bool *ok)
{
    Glib::Variant<double> b;
    m_proxy->get_cached_property(b, "TestPropReadDouble");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadDouble");
        }
        return double();
    }

}

guint64 org::gdbus::codegen::glibmm::TestProxy::TestPropReadUInt64_get(bool *ok)
{
    Glib::Variant<guint64> b;
    m_proxy->get_cached_property(b, "TestPropReadUInt64");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadUInt64");
        }
        return guint64();
    }

}

gint64 org::gdbus::codegen::glibmm::TestProxy::TestPropReadInt64_get(bool *ok)
{
    Glib::Variant<gint64> b;
    m_proxy->get_cached_property(b, "TestPropReadInt64");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadInt64");
        }
        return gint64();
    }

}

guint32 org::gdbus::codegen::glibmm::TestProxy::TestPropReadUInt_get(bool *ok)
{
    Glib::Variant<guint32> b;
    m_proxy->get_cached_property(b, "TestPropReadUInt");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadUInt");
        }
        return guint32();
    }

}

gint32 org::gdbus::codegen::glibmm::TestProxy::TestPropReadInt_get(bool *ok)
{
    Glib::Variant<gint32> b;
    m_proxy->get_cached_property(b, "TestPropReadInt");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadInt");
        }
        return gint32();
    }

}

guint16 org::gdbus::codegen::glibmm::TestProxy::TestPropReadUInt16_get(bool *ok)
{
    Glib::Variant<guint16> b;
    m_proxy->get_cached_property(b, "TestPropReadUInt16");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadUInt16");
        }
        return guint16();
    }

}

gint16 org::gdbus::codegen::glibmm::TestProxy::TestPropReadInt16_get(bool *ok)
{
    Glib::Variant<gint16> b;
    m_proxy->get_cached_property(b, "TestPropReadInt16");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadInt16");
        }
        return gint16();
    }

}

guchar org::gdbus::codegen::glibmm::TestProxy::TestPropReadChar_get(bool *ok)
{
    Glib::Variant<guchar> b;
    m_proxy->get_cached_property(b, "TestPropReadChar");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadChar");
        }
        return guchar();
    }

}

bool org::gdbus::codegen::glibmm::TestProxy::TestPropReadBoolean_get(bool *ok)
{
    Glib::Variant<bool> b;
    m_proxy->get_cached_property(b, "TestPropReadBoolean");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadBoolean");
        }
        return bool();
    }

}

gint32 org::gdbus::codegen::glibmm::TestProxy::TestPropInternalReadPropertyChange_get(bool *ok)
{
    Glib::Variant<gint32> b;
    m_proxy->get_cached_property(b, "TestPropInternalReadPropertyChange");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropInternalReadPropertyChange");
        }
        return gint32();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteByteStringArray_set(const std::vector<std::string> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteByteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<std::string>>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteByteStringArray_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteByteStringArray_set_sync(const std::vector<std::string> & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteByteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<std::string>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteObjectPathArray_set(const std::vector<Glib::DBusObjectPathString> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteObjectPathArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::DBusObjectPathString>>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteObjectPathArray_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteObjectPathArray_set_sync(const std::vector<Glib::DBusObjectPathString> & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteObjectPathArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::DBusObjectPathString>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteStringArray_set(const std::vector<Glib::ustring> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::ustring>>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteStringArray_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteStringArray_set_sync(const std::vector<Glib::ustring> & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::ustring>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteByteString_set(const std::string & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteByteString"));
    gsize len;
    char *data;

    len = value.size();
    data = g_strndup (value.c_str(), len);

    GVariant * newVar = g_variant_new_from_data (G_VARIANT_TYPE ("ay"), data, len, TRUE, g_free, data);

    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::string>(newVar)));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteByteString_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteByteString_set_sync(const std::string & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteByteString"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::string>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteSignature_set(const Glib::DBusSignatureString & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteSignature"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusSignatureString>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteSignature_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteSignature_set_sync(const Glib::DBusSignatureString & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteSignature"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusSignatureString>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteObjectPath_set(const Glib::DBusObjectPathString & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteObjectPath"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusObjectPathString>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteObjectPath_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteObjectPath_set_sync(const Glib::DBusObjectPathString & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteObjectPath"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusObjectPathString>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteString_set(const Glib::ustring & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteString"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::ustring>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteString_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteString_set_sync(const Glib::ustring & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteString"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::ustring>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteDouble_set(double value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteDouble"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<double>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteDouble_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteDouble_set_sync(double value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteDouble"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<double>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteUInt64_set(guint64 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteUInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint64>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteUInt64_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteUInt64_set_sync(guint64 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteUInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint64>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteInt64_set(gint64 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint64>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteInt64_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteInt64_set_sync(gint64 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint64>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteUInt_set(guint32 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteUInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint32>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteUInt_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteUInt_set_sync(guint32 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteUInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint32>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteInt_set(gint32 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint32>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteInt_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteInt_set_sync(gint32 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint32>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteUInt16_set(guint16 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteUInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint16>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteUInt16_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteUInt16_set_sync(guint16 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteUInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint16>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteInt16_set(gint16 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint16>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteInt16_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteInt16_set_sync(gint16 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint16>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteChar_set(guchar value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteChar"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guchar>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteChar_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteChar_set_sync(guchar value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteChar"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guchar>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteBoolean_set(bool value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteBoolean"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<bool>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteBoolean_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropWriteBoolean_set_sync(bool value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropWriteBoolean"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<bool>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

std::vector<std::string> org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteByteStringArray_get(bool *ok)
{
    Glib::Variant<std::vector<std::string>> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteByteStringArray");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteByteStringArray");
        }
        return std::vector<std::string>();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteByteStringArray_set(const std::vector<std::string> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteByteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<std::string>>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteByteStringArray_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteByteStringArray_set_sync(const std::vector<std::string> & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteByteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<std::string>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

std::vector<Glib::DBusObjectPathString> org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteObjectPathArray_get(bool *ok)
{
    Glib::Variant<std::vector<Glib::DBusObjectPathString>> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteObjectPathArray");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteObjectPathArray");
        }
        return std::vector<Glib::DBusObjectPathString>();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteObjectPathArray_set(const std::vector<Glib::DBusObjectPathString> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteObjectPathArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::DBusObjectPathString>>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteObjectPathArray_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteObjectPathArray_set_sync(const std::vector<Glib::DBusObjectPathString> & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteObjectPathArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::DBusObjectPathString>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

std::vector<Glib::ustring> org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteStringArray_get(bool *ok)
{
    Glib::Variant<std::vector<Glib::ustring>> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteStringArray");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteStringArray");
        }
        return std::vector<Glib::ustring>();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteStringArray_set(const std::vector<Glib::ustring> & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::ustring>>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteStringArray_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteStringArray_set_sync(const std::vector<Glib::ustring> & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteStringArray"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::vector<Glib::ustring>>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

std::string org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteByteString_get(bool *ok)
{
    Glib::Variant<std::string> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteByteString");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteByteString");
        }
        return std::string();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteByteString_set(const std::string & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteByteString"));
    gsize len;
    char *data;

    len = value.size();
    data = g_strndup (value.c_str(), len);

    GVariant * newVar = g_variant_new_from_data (G_VARIANT_TYPE ("ay"), data, len, TRUE, g_free, data);

    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::string>(newVar)));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteByteString_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteByteString_set_sync(const std::string & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteByteString"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<std::string>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

Glib::DBusSignatureString org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteSignature_get(bool *ok)
{
    Glib::Variant<Glib::DBusSignatureString> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteSignature");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteSignature");
        }
        return Glib::DBusSignatureString();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteSignature_set(const Glib::DBusSignatureString & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteSignature"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusSignatureString>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteSignature_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteSignature_set_sync(const Glib::DBusSignatureString & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteSignature"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusSignatureString>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

Glib::DBusObjectPathString org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteObjectPath_get(bool *ok)
{
    Glib::Variant<Glib::DBusObjectPathString> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteObjectPath");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteObjectPath");
        }
        return Glib::DBusObjectPathString();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteObjectPath_set(const Glib::DBusObjectPathString & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteObjectPath"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusObjectPathString>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteObjectPath_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteObjectPath_set_sync(const Glib::DBusObjectPathString & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteObjectPath"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::DBusObjectPathString>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

Glib::ustring org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteString_get(bool *ok)
{
    Glib::Variant<Glib::ustring> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteString");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteString");
        }
        return Glib::ustring();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteString_set(const Glib::ustring & value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteString"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::ustring>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteString_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteString_set_sync(const Glib::ustring & value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteString"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<Glib::ustring>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

double org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteDouble_get(bool *ok)
{
    Glib::Variant<double> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteDouble");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteDouble");
        }
        return double();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteDouble_set(double value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteDouble"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<double>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteDouble_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteDouble_set_sync(double value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteDouble"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<double>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

guint64 org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt64_get(bool *ok)
{
    Glib::Variant<guint64> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteUInt64");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteUInt64");
        }
        return guint64();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt64_set(guint64 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteUInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint64>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt64_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt64_set_sync(guint64 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteUInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint64>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

gint64 org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt64_get(bool *ok)
{
    Glib::Variant<gint64> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteInt64");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteInt64");
        }
        return gint64();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt64_set(gint64 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint64>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt64_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt64_set_sync(gint64 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteInt64"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint64>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

guint32 org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt_get(bool *ok)
{
    Glib::Variant<guint32> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteUInt");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteUInt");
        }
        return guint32();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt_set(guint32 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteUInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint32>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt_set_sync(guint32 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteUInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint32>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

gint32 org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt_get(bool *ok)
{
    Glib::Variant<gint32> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteInt");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteInt");
        }
        return gint32();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt_set(gint32 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint32>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt_set_sync(gint32 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteInt"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint32>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

guint16 org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt16_get(bool *ok)
{
    Glib::Variant<guint16> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteUInt16");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteUInt16");
        }
        return guint16();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt16_set(guint16 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteUInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint16>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt16_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteUInt16_set_sync(guint16 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteUInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guint16>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

gint16 org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt16_get(bool *ok)
{
    Glib::Variant<gint16> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteInt16");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteInt16");
        }
        return gint16();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt16_set(gint16 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint16>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt16_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteInt16_set_sync(gint16 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteInt16"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint16>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

guchar org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteChar_get(bool *ok)
{
    Glib::Variant<guchar> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteChar");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteChar");
        }
        return guchar();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteChar_set(guchar value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteChar"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guchar>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteChar_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteChar_set_sync(guchar value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteChar"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<guchar>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

bool org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteBoolean_get(bool *ok)
{
    Glib::Variant<bool> b;
    m_proxy->get_cached_property(b, "TestPropReadWriteBoolean");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropReadWriteBoolean");
        }
        return bool();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteBoolean_set(bool value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteBoolean"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<bool>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteBoolean_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropReadWriteBoolean_set_sync(bool value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropReadWriteBoolean"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<bool>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

gint32 org::gdbus::codegen::glibmm::TestProxy::TestPropInternalReadWritePropertyChange_get(bool *ok)
{
    Glib::Variant<gint32> b;
    m_proxy->get_cached_property(b, "TestPropInternalReadWritePropertyChange");
    if (b) {
        if (ok) {
            *ok = true;
        }
        return (specialGetter(b));
    } else {
        if (ok) {
            *ok = false;
        } else {
            g_warning("Unhandled error while getting property TestPropInternalReadWritePropertyChange");
        }
        return gint32();
    }

}

void org::gdbus::codegen::glibmm::TestProxy::TestPropInternalReadWritePropertyChange_set(gint32 value, const Gio::SlotAsyncReady &cb)
{
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropInternalReadWritePropertyChange"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint32>::create((value))));

    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call("org.freedesktop.DBus.Properties.Set", cb, params);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropInternalReadWritePropertyChange_set_finish(const Glib::RefPtr<Gio::AsyncResult> &result) {
    m_proxy->call_finish(result);
}

void org::gdbus::codegen::glibmm::TestProxy::TestPropInternalReadWritePropertyChange_set_sync(gint32 value) {
    std::vector<Glib::VariantBase> paramsVec;
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("org.gdbus.codegen.glibmm.Test"));
    paramsVec.push_back(Glib::Variant<Glib::ustring>::create("TestPropInternalReadWritePropertyChange"));
    paramsVec.push_back(Glib::Variant<Glib::VariantBase>::create(Glib::Variant<gint32>::create((value))));
    Glib::VariantContainerBase params = Glib::VariantContainerBase::create_tuple(paramsVec);
    m_proxy->call_sync("org.freedesktop.DBus.Properties.Set", params);
}

/**
 * TestSignalByteStringArray: emitted to test arrays of byte arrays.
 *   @Param1: the array of arrays
 */

void org::gdbus::codegen::glibmm::TestProxy::handle_signal(const Glib::ustring&/* sender_name */,
    const Glib::ustring& signal_name,
    const Glib::VariantContainerBase& parameters)
{
    static_cast<void>(signal_name); // maybe unused
    static_cast<void>(parameters); // maybe unused

    if (signal_name == "TestSignalByteStringArray") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<std::vector<std::string>> base_Param1;
        parameters.get_child(base_Param1, 0);
        std::vector<std::string> p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalByteStringArray_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalObjectPathArray") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<std::vector<Glib::DBusObjectPathString>> base_Param1;
        parameters.get_child(base_Param1, 0);
        std::vector<Glib::DBusObjectPathString> p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalObjectPathArray_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalStringArray") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<std::vector<Glib::ustring>> base_Param1;
        parameters.get_child(base_Param1, 0);
        std::vector<Glib::ustring> p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalStringArray_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalByteString") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<std::string> base_Param1;
        parameters.get_child(base_Param1, 0);
        std::string p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalByteString_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalSignature") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<Glib::DBusSignatureString> base_Param1;
        parameters.get_child(base_Param1, 0);
        Glib::DBusSignatureString p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalSignature_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalObjectPath") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<Glib::DBusObjectPathString> base_Param1;
        parameters.get_child(base_Param1, 0);
        Glib::DBusObjectPathString p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalObjectPath_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalString") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<Glib::ustring> base_Param1;
        parameters.get_child(base_Param1, 0);
        Glib::ustring p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalString_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalDouble") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<double> base_Param1;
        parameters.get_child(base_Param1, 0);
        double p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalDouble_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalUInt64") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<guint64> base_Param1;
        parameters.get_child(base_Param1, 0);
        guint64 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalUInt64_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalInt64") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<gint64> base_Param1;
        parameters.get_child(base_Param1, 0);
        gint64 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalInt64_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalUInt") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<guint32> base_Param1;
        parameters.get_child(base_Param1, 0);
        guint32 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalUInt_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalInt") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<gint32> base_Param1;
        parameters.get_child(base_Param1, 0);
        gint32 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalInt_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalUInt16") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<guint16> base_Param1;
        parameters.get_child(base_Param1, 0);
        guint16 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalUInt16_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalInt16") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<gint16> base_Param1;
        parameters.get_child(base_Param1, 0);
        gint16 p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalInt16_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalChar") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<guchar> base_Param1;
        parameters.get_child(base_Param1, 0);
        guchar p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalChar_signal.emit((p_Param1));
    }
    if (signal_name == "TestSignalBoolean") {
        if (parameters.get_n_children() != 1) return;
        Glib::Variant<bool> base_Param1;
        parameters.get_child(base_Param1, 0);
        bool p_Param1;
        p_Param1 = base_Param1.get();

        TestSignalBoolean_signal.emit((p_Param1));
    }
}

void org::gdbus::codegen::glibmm::TestProxy::handle_properties_changed(
    const Gio::DBus::Proxy::MapChangedProperties &changed_properties,
    const std::vector<Glib::ustring> &/* invalidated_properties */)
{
    static_cast<void>(changed_properties); // maybe unused

    // Only check changed_properties since value will already be cached. Glib can be setup to get
    // values of invalidated properties in which case property will be in changed_properties when
    // value is actually received. See Gio::DBus::ProxyFlags::PROXY_FLAGS_GET_INVALIDATED_PROPERTIES .

    if (changed_properties.find("TestPropReadByteStringArray") != changed_properties.cend())
        m_TestPropReadByteStringArray_changed.emit();
    if (changed_properties.find("TestPropReadObjectPathArray") != changed_properties.cend())
        m_TestPropReadObjectPathArray_changed.emit();
    if (changed_properties.find("TestPropReadStringArray") != changed_properties.cend())
        m_TestPropReadStringArray_changed.emit();
    if (changed_properties.find("TestPropReadByteString") != changed_properties.cend())
        m_TestPropReadByteString_changed.emit();
    if (changed_properties.find("TestPropReadSignature") != changed_properties.cend())
        m_TestPropReadSignature_changed.emit();
    if (changed_properties.find("TestPropReadObjectPath") != changed_properties.cend())
        m_TestPropReadObjectPath_changed.emit();
    if (changed_properties.find("TestPropReadString") != changed_properties.cend())
        m_TestPropReadString_changed.emit();
    if (changed_properties.find("TestPropReadDouble") != changed_properties.cend())
        m_TestPropReadDouble_changed.emit();
    if (changed_properties.find("TestPropReadUInt64") != changed_properties.cend())
        m_TestPropReadUInt64_changed.emit();
    if (changed_properties.find("TestPropReadInt64") != changed_properties.cend())
        m_TestPropReadInt64_changed.emit();
    if (changed_properties.find("TestPropReadUInt") != changed_properties.cend())
        m_TestPropReadUInt_changed.emit();
    if (changed_properties.find("TestPropReadInt") != changed_properties.cend())
        m_TestPropReadInt_changed.emit();
    if (changed_properties.find("TestPropReadUInt16") != changed_properties.cend())
        m_TestPropReadUInt16_changed.emit();
    if (changed_properties.find("TestPropReadInt16") != changed_properties.cend())
        m_TestPropReadInt16_changed.emit();
    if (changed_properties.find("TestPropReadChar") != changed_properties.cend())
        m_TestPropReadChar_changed.emit();
    if (changed_properties.find("TestPropReadBoolean") != changed_properties.cend())
        m_TestPropReadBoolean_changed.emit();
    if (changed_properties.find("TestPropInternalReadPropertyChange") != changed_properties.cend())
        m_TestPropInternalReadPropertyChange_changed.emit();
    if (changed_properties.find("TestPropWriteByteStringArray") != changed_properties.cend())
        m_TestPropWriteByteStringArray_changed.emit();
    if (changed_properties.find("TestPropWriteObjectPathArray") != changed_properties.cend())
        m_TestPropWriteObjectPathArray_changed.emit();
    if (changed_properties.find("TestPropWriteStringArray") != changed_properties.cend())
        m_TestPropWriteStringArray_changed.emit();
    if (changed_properties.find("TestPropWriteByteString") != changed_properties.cend())
        m_TestPropWriteByteString_changed.emit();
    if (changed_properties.find("TestPropWriteSignature") != changed_properties.cend())
        m_TestPropWriteSignature_changed.emit();
    if (changed_properties.find("TestPropWriteObjectPath") != changed_properties.cend())
        m_TestPropWriteObjectPath_changed.emit();
    if (changed_properties.find("TestPropWriteString") != changed_properties.cend())
        m_TestPropWriteString_changed.emit();
    if (changed_properties.find("TestPropWriteDouble") != changed_properties.cend())
        m_TestPropWriteDouble_changed.emit();
    if (changed_properties.find("TestPropWriteUInt64") != changed_properties.cend())
        m_TestPropWriteUInt64_changed.emit();
    if (changed_properties.find("TestPropWriteInt64") != changed_properties.cend())
        m_TestPropWriteInt64_changed.emit();
    if (changed_properties.find("TestPropWriteUInt") != changed_properties.cend())
        m_TestPropWriteUInt_changed.emit();
    if (changed_properties.find("TestPropWriteInt") != changed_properties.cend())
        m_TestPropWriteInt_changed.emit();
    if (changed_properties.find("TestPropWriteUInt16") != changed_properties.cend())
        m_TestPropWriteUInt16_changed.emit();
    if (changed_properties.find("TestPropWriteInt16") != changed_properties.cend())
        m_TestPropWriteInt16_changed.emit();
    if (changed_properties.find("TestPropWriteChar") != changed_properties.cend())
        m_TestPropWriteChar_changed.emit();
    if (changed_properties.find("TestPropWriteBoolean") != changed_properties.cend())
        m_TestPropWriteBoolean_changed.emit();
    if (changed_properties.find("TestPropReadWriteByteStringArray") != changed_properties.cend())
        m_TestPropReadWriteByteStringArray_changed.emit();
    if (changed_properties.find("TestPropReadWriteObjectPathArray") != changed_properties.cend())
        m_TestPropReadWriteObjectPathArray_changed.emit();
    if (changed_properties.find("TestPropReadWriteStringArray") != changed_properties.cend())
        m_TestPropReadWriteStringArray_changed.emit();
    if (changed_properties.find("TestPropReadWriteByteString") != changed_properties.cend())
        m_TestPropReadWriteByteString_changed.emit();
    if (changed_properties.find("TestPropReadWriteSignature") != changed_properties.cend())
        m_TestPropReadWriteSignature_changed.emit();
    if (changed_properties.find("TestPropReadWriteObjectPath") != changed_properties.cend())
        m_TestPropReadWriteObjectPath_changed.emit();
    if (changed_properties.find("TestPropReadWriteString") != changed_properties.cend())
        m_TestPropReadWriteString_changed.emit();
    if (changed_properties.find("TestPropReadWriteDouble") != changed_properties.cend())
        m_TestPropReadWriteDouble_changed.emit();
    if (changed_properties.find("TestPropReadWriteUInt64") != changed_properties.cend())
        m_TestPropReadWriteUInt64_changed.emit();
    if (changed_properties.find("TestPropReadWriteInt64") != changed_properties.cend())
        m_TestPropReadWriteInt64_changed.emit();
    if (changed_properties.find("TestPropReadWriteUInt") != changed_properties.cend())
        m_TestPropReadWriteUInt_changed.emit();
    if (changed_properties.find("TestPropReadWriteInt") != changed_properties.cend())
        m_TestPropReadWriteInt_changed.emit();
    if (changed_properties.find("TestPropReadWriteUInt16") != changed_properties.cend())
        m_TestPropReadWriteUInt16_changed.emit();
    if (changed_properties.find("TestPropReadWriteInt16") != changed_properties.cend())
        m_TestPropReadWriteInt16_changed.emit();
    if (changed_properties.find("TestPropReadWriteChar") != changed_properties.cend())
        m_TestPropReadWriteChar_changed.emit();
    if (changed_properties.find("TestPropReadWriteBoolean") != changed_properties.cend())
        m_TestPropReadWriteBoolean_changed.emit();
    if (changed_properties.find("TestPropInternalReadWritePropertyChange") != changed_properties.cend())
        m_TestPropInternalReadWritePropertyChange_changed.emit();
}

org::gdbus::codegen::glibmm::TestProxy::TestProxy(const Glib::RefPtr<Gio::DBus::Proxy> &proxy) : m_proxy(proxy)
{
    m_proxy->signal_signal().connect(sigc::mem_fun(this, &TestProxy::handle_signal));
    m_proxy->signal_properties_changed().
        connect(sigc::mem_fun(this, &TestProxy::handle_properties_changed));
}

void org::gdbus::codegen::glibmm::TestProxy::createForBus(
    Gio::DBus::BusType busType,
    Gio::DBus::ProxyFlags proxyFlags,
    const std::string &name,
    const std::string &objectPath,
    const Gio::SlotAsyncReady &slot,
    const Glib::RefPtr<Gio::Cancellable> &cancellable)
{
    Gio::DBus::Proxy::create_for_bus(busType,
        name,
        objectPath,
        "org.gdbus.codegen.glibmm.Test",
        slot,
        cancellable,
        Glib::RefPtr<Gio::DBus::InterfaceInfo>(),
        proxyFlags);
}

Glib::RefPtr<org::gdbus::codegen::glibmm::TestProxy> org::gdbus::codegen::glibmm::TestProxy::createForBusFinish(const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::RefPtr<Gio::DBus::Proxy> proxy =
        Gio::DBus::Proxy::create_for_bus_finish(result);
    org::gdbus::codegen::glibmm::TestProxy *p =
        new org::gdbus::codegen::glibmm::TestProxy(proxy);
    return Glib::RefPtr<org::gdbus::codegen::glibmm::TestProxy>(p);
}

Glib::RefPtr<org::gdbus::codegen::glibmm::TestProxy> org::gdbus::codegen::glibmm::TestProxy::createForBus_sync(
    Gio::DBus::BusType busType,
    Gio::DBus::ProxyFlags proxyFlags,
    const std::string &name,
    const std::string &objectPath,
    const Glib::RefPtr<Gio::Cancellable> &cancellable)
{
    Glib::RefPtr<Gio::DBus::Proxy> proxy =
        Gio::DBus::Proxy::create_for_bus_sync(busType,
            name,
            objectPath,
            "org.gdbus.codegen.glibmm.Test",
            cancellable,
            Glib::RefPtr<Gio::DBus::InterfaceInfo>(),
            proxyFlags);
    org::gdbus::codegen::glibmm::TestProxy *p =
        new org::gdbus::codegen::glibmm::TestProxy(proxy);
    return Glib::RefPtr<org::gdbus::codegen::glibmm::TestProxy>(p);
}
